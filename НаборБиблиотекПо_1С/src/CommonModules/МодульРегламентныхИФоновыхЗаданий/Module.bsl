
#Область РегламентныеИФоновыеЗадания

Процедура УниверсальноеРегламентноеЗадание(ВыполняемоеЗадание = Неопределено, ДополнительныйПараметр = NULL) Экспорт
	
	Если ВыполняемоеЗадание = "ВыгрузкаПартииНазначенныхНомеровСообщенийПриПереходеНаНовуюБД" Тогда
		
		ВыгрузкаПартииНазначенныхНомеровСообщенийПриПереходеНаНовуюБД(ДополнительныйПараметр);
		
	ИначеЕсли ВыполняемоеЗадание = "НазначитьНомераСообщенийПриПереходеНаНовуюБД" Тогда
		
		НазначитьНомераСообщенийПриПереходеНаНовуюБД(ДополнительныйПараметр);

	ИначеЕсли ВыполняемоеЗадание = "ПерезаписатьЗагружаемыеОбъектыИзДругойБазы1С" Тогда
		
		ПерезаписатьЗагружаемыеОбъектыИзДругойБазы1С();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДождатьсяВыполненияФоновыхЗаданий(МассивФЗ, ТаймаутОжидания = 20, ЗаданийНеБольше = 1, ЕстьОшибки = Ложь) Экспорт
	
	Если ТипЗнч(МассивФЗ) <> Тип("Массив") Или МассивФЗ.Количество() = 0 Тогда
		Возврат МассивФЗ;
	КонецЕсли;
	
	Пока МассивФЗ.Количество() >= ЗаданийНеБольше Цикл
		Попытка
			ФоновыеЗадания.ОжидатьЗавершенияВыполнения(МассивФЗ, ТаймаутОжидания);
		Исключение
		КонецПопытки;
		НовыйМассив = Новый Массив;
		Для Каждого ФЗ Из МассивФЗ Цикл
			ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ФЗ.УникальныйИдентификатор);
			Если ФЗ = Неопределено Тогда
				ЕстьОшибки = Истина;
				Продолжить;
			ИначеЕсли ФЗ.Состояние = СостояниеФоновогоЗадания.Активно Тогда
				НовыйМассив.Добавить(ФЗ);
			ИначеЕсли ФЗ.Состояние <> СостояниеФоновогоЗадания.Завершено Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
		МассивФЗ = НовыйМассив;
	КонецЦикла;
	
	Возврат МассивФЗ;
	
КонецФункции

Функция ПолучитьСписокКлючейЗапущенныхФоновыхЗаданий(ИмяМетода, мСписокID = Неопределено, ПреобразоватьКЧислу = Истина) Экспорт
	
	Если мСписокID = Неопределено Тогда
		мСписокID = Новый Массив;
	КонецЕсли;
	мТекФонов = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Состояние", ИмяМетода,
		СостояниеФоновогоЗадания.Активно));
	Для Каждого ТекФон Из мТекФонов Цикл
		Попытка
			Если ПреобразоватьКЧислу Тогда
				мСписокID.Добавить(Число(ТекФон.Ключ));
			Иначе
				мСписокID.Добавить(ТекФон.Ключ);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Возврат мСписокID;
	
КонецФункции

#КонецОбласти

#Область ПереездНаНовуюБД

Процедура ДляПереходаНаНовуюБД_СсылочныеПриЗаписи(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ОбменДанными.Загрузка = Истина
		И Источник.ОбменДанными.Отправитель <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Настройки = КодОбщегоНазначения.ПолучитьДополнительнуюНастройкуПрограммы(,, "Переход на новую БД");
		Узел = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(Настройки, "Узел");
		Если Не КодОбщегоНазначения.ПолучитьЭлементСтруктуры(Настройки, "Включена") = Истина
			Или Не ЗначениеЗаполнено(Узел) Тогда
			Возврат;
		КонецЕсли;
		
		Исключения = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(Настройки, "Исключения");
		Если ТипЗнч(Исключения) = Тип("Строка") Тогда
			Если Источник.Метаданные().ПолноеИмя() = Исключения Тогда
				Возврат;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Исключения) = Тип("Массив") Тогда
			Если Исключения.Найти(Источник.Метаданные().ПолноеИмя()) <> Неопределено Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Источник.ОбменДанными.Получатели.Добавить(Узел);
	Исключение
		РаботаС_Sentry.ОтправитьЛогПоИсключению(ИнформацияОбОшибке(),,, "ДляПереходаНаНовуюБД_СсылочныеПриЗаписи");
	КонецПопытки;
	
КонецПроцедуры

Процедура ДляПереходаНаНовуюБД_РегистрыПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ОбменДанными.Загрузка = Истина
		И Источник.ОбменДанными.Отправитель <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Настройки = КодОбщегоНазначения.ПолучитьДополнительнуюНастройкуПрограммы(,, "Переход на новую БД");
		Узел = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(Настройки, "Узел");
		Если Не КодОбщегоНазначения.ПолучитьЭлементСтруктуры(Настройки, "Включена") = Истина
			Или Не ЗначениеЗаполнено(Узел) Тогда
			Возврат;
		КонецЕсли;
		
		ПолноеИмяМетаданных = Источник.Метаданные().ПолноеИмя();
		
		Исключения = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(Настройки, "Исключения");
		Если ТипЗнч(Исключения) = Тип("Строка") Тогда
			Если ПолноеИмяМетаданных = Исключения Тогда
				Возврат;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Исключения) = Тип("Массив") Тогда
			Если Исключения.Найти(ПолноеИмяМетаданных) <> Неопределено Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли; 
		
		Если ПолноеИмяМетаданных = "РегистрСведений.СрезыИзмененийЗаявок" Тогда
			СвойстваИсключения = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(Настройки, "СвойстваИсключения");
			Показатель = Источник.Отбор.Показатель.Значение;
			Если ТипЗнч(СвойстваИсключения) = Тип("Массив") Тогда
				Если СвойстваИсключения.Найти(Показатель) <> Неопределено Тогда
					Возврат;
				КонецЕсли;
			ИначеЕсли СвойстваИсключения <> Неопределено Тогда
				Если СвойстваИсключения = Показатель Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Источник.ОбменДанными.Получатели.Добавить(Узел);
	Исключение
		РаботаС_Sentry.ОтправитьЛогПоИсключению(ИнформацияОбОшибке(),,, "ДляПереходаНаНовуюБД_РегистрыПриЗаписи");
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыгрузкаПартииНазначенныхНомеровСообщенийПриПереходеНаНовуюБД(КоличествоПотоков = 5) Экспорт
	
	НужноПисатьЗИП = Истина;
	Настройки = КодОбщегоНазначения.ПолучитьДополнительнуюНастройкуПрограммы(,, "Переход на новую БД");
	Узел = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(Настройки, "Узел");
	Если Не ЗначениеЗаполнено(Узел) Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоПотоков = Неопределено Тогда
		КоличествоПотоков = 5;
	КонецЕсли;
	
	ВыгрузитьЗарегистрированныеИзменения(Узел, КоличествоПотоков, НужноПисатьЗИП);
	
КонецПроцедуры

Процедура НазначитьНомераСообщенийПриПереходеНаНовуюБД(КоличествоПотоков = 5) Экспорт
	
	Настройки = КодОбщегоНазначения.ПолучитьДополнительнуюНастройкуПрограммы(,, "Переход на новую БД");
	Узел = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(Настройки, "Узел");
	Если Не ЗначениеЗаполнено(Узел) Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоПотоков = Неопределено Тогда
		КоличествоПотоков = 5;
	КонецЕсли;
	
	Нач = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекстЗапроса = ПолучитьИтоговыйТекстЗапросаПоЗарегистрированнымОбъектам(Истина, Узел);
	Запрос = Новый Запрос(ТекстЗапроса);
	//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Узел", Узел);
	ВыборкаНомерСообщения = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом("Конец", "Поиск еще зарегистрированных объектов", Нач);
	
	НачОб = ТекущаяУниверсальнаяДатаВМиллисекундах();
	//Нач = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РазмерПакета = 1000;
	Шаблон =
		"ВЫБРАТЬ ПЕРВЫЕ " + Формат(РазмерПакета, "ЧГ=0") + "
		|	*,
		|	""%1"" КАК ИмяМетаданного
		|ИЗ
		|	%1.Изменения КАК Табл
		|ГДЕ
		|	Табл.Узел = &Узел
		|	И Табл.НомерСообщения ЕСТЬ NULL";
	Накопленное = 0;
	НакопленноНаСообщение = 0;
	мОбъектов = Новый Массив;
	НомерСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Узел, "НомерОтправленного") + 1;
	Пока ВыборкаНомерСообщения.Следующий() Цикл
		Выборка = ВыборкаНомерСообщения.Выбрать();
		Пока Выборка.Следующий() Цикл
			МетаОб = Метаданные.НайтиПоПолномуИмени(Выборка.ИмяМетаданного);
			Текст = СтрШаблон(Шаблон, Выборка.ИмяМетаданного);
			Запрос.Текст = Текст;
			Пока Истина Цикл
				РезультатВыборки = Запрос.Выполнить();
				Если РезультатВыборки.Пустой() Тогда
					Прервать;
				КонецЕсли;
				ВыборкаПорции = РезультатВыборки.Выбрать();
				Пока ВыборкаПорции.Следующий() Цикл
					Накопленное = Накопленное + 1;
					НакопленноНаСообщение = НакопленноНаСообщение + 1;
					Если СтрНачинаетсяС(Выборка.ИмяМетаданного, "РегистрСведений") Тогда
						ИзмененныйОбъект = РегистрыСведений[МетаОб.Имя].СоздатьНаборЗаписей();
						Если МетаОб.РежимЗаписи =
								Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
							Если МетаОб.ОсновнойОтборПоПериоду Тогда//МетаОб.ПериодичностьРегистраСведений <>
								//Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
								ИзмененныйОбъект.Отбор.Период.Установить(ВыборкаПорции.Период);
							КонецЕсли;
							Для Каждого МетаИзм Из МетаОб.Измерения Цикл
								Если Не МетаИзм.ОсновнойОтбор Тогда
									Продолжить;
								КонецЕсли;
								ИзмененныйОбъект.Отбор[МетаИзм.Имя].Установить(ВыборкаПорции[МетаИзм.Имя]);
							КонецЦикла;
						Иначе
							ИзмененныйОбъект.Отбор.Регистратор.Установить(ВыборкаПорции.Регистратор);
						КонецЕсли;
						//ИзмененныйОбъект.Прочитать();
						
					ИначеЕсли СтрНачинаетсяС(Выборка.ИмяМетаданного, "РегистрНакопления") Тогда
						ИзмененныйОбъект = РегистрыНакопления[МетаОб.Имя].СоздатьНаборЗаписей();
						ИзмененныйОбъект.Отбор.Регистратор.Установить(ВыборкаПорции.Регистратор);
						//ИзмененныйОбъект.Прочитать();
					ИначеЕсли СтрНачинаетсяС(Выборка.ИмяМетаданного, "РегистрБухгалтерии") Тогда
						ИзмененныйОбъект = РегистрыБухгалтерии[МетаОб.Имя].СоздатьНаборЗаписей();
						ИзмененныйОбъект.Отбор.Регистратор.Установить(ВыборкаПорции.Регистратор);
						//ИзмененныйОбъект.Прочитать();
					Иначе
						ИзмененныйОбъект = ВыборкаПорции.Ссылка;//.ПолучитьОбъект();
					КонецЕсли;
					мОбъектов.Добавить(ИзмененныйОбъект);
					Если НакопленноНаСообщение >= РазмерПакета Тогда
						//КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом("Конец", "Накопление объектов для проставления номера сообщения", Нач);
						ЗарегистрироватьИзмененияНаУзлу(Узел, мОбъектов, НомерСообщения, Истина, НакопленноНаСообщение);
						//Нач = ТекущаяУниверсальнаяДатаВМиллисекундах();
					КонецЕсли;
				КонецЦикла;
				Если мОбъектов.Количество() > 0 Тогда
					ЗарегистрироватьИзмененияНаУзлу(Узел, мОбъектов, НомерСообщения, НакопленноНаСообщение >= РазмерПакета, НакопленноНаСообщение);
				КонецЕсли;
				Если ВыборкаПорции.Количество() < РазмерПакета Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если мОбъектов.Количество() > 0 Тогда
		ЗарегистрироватьИзмененияНаУзлу(Узел, мОбъектов, НомерСообщения, НакопленноНаСообщение >= РазмерПакета, НакопленноНаСообщение);
	КонецЕсли;
	
	Если Накопленное > 0 Тогда
		УзелОбъект = Узел.ПолучитьОбъект();
		УзелОбъект.НомерОтправленного = НомерСообщения;
		УзелОбъект.Записать();
	КонецЕсли;
	
	КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом(СтрШаблон("Конец. Всего объектов %1", Накопленное),
		"Все изменения выбраны и номер проставлен", НачОб);
		
КонецПроцедуры

Процедура ВыгрузитьЗарегистрированныеИзменения(Узел, КоличествоПотоков, НужноПисатьЗИП) Экспорт
	
	Нач = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекстЗапроса = ПолучитьИтоговыйТекстЗапросаПоЗарегистрированнымОбъектам(,Узел);
	Запрос = Новый Запрос(ТекстЗапроса);
	//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Узел", Узел);
	ВыборкаНомерСообщения = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом("Конец", "Поиск уже зарегистрированных объектов", Нач);
	
	МассивФЗ = Новый Массив;
	ФЗпоНомерамСообщений = Новый Соответствие;
	
	мФоновыхПотоков = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Состояние",
		"МодульРегламентныхИФоновыхЗаданий.ПотокВыгрузкиИзменений", СостояниеФоновогоЗадания.Активно));
	мФоновыхПодПотоков = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Состояние",
		"МодульРегламентныхИФоновыхЗаданий.ПодПотокВыгрузкиПорции", СостояниеФоновогоЗадания.Активно));
	
	ЗанятыеПотоки = Новый Соответствие;
	Для Каждого ФЗ Из мФоновыхПотоков Цикл
		МассивФЗ.Добавить(ФЗ);
		ПервыйРазделитель = СтрНайти(ФЗ.Ключ, "_");
		НомерСообщенияИзПотока = Число(Лев(ФЗ.Ключ, ПервыйРазделитель - 1));
		НомерПотока = Число(Сред(ФЗ.Ключ, ПервыйРазделитель + 1));
		Если ЗанятыеПотоки[НомерСообщенияИзПотока] = Неопределено Тогда
			ЗанятыеПотоки.Вставить(НомерСообщенияИзПотока, Новый Массив);
		КонецЕсли;
		ЗанятыеПотоки[НомерСообщенияИзПотока].Добавить(НомерПотока);
		Если ФЗпоНомерамСообщений[НомерСообщенияИзПотока] = Неопределено Тогда
			ФЗпоНомерамСообщений.Вставить(НомерСообщенияИзПотока, Новый Массив);
		КонецЕсли;
		ФЗпоНомерамСообщений[НомерСообщенияИзПотока].Добавить(ФЗ);
	КонецЦикла;
	Для Каждого ФЗ Из мФоновыхПодПотоков Цикл
		мЧастейКлюча = СтрРазделить(ФЗ.Ключ, "_", Ложь);
		НомерСообщенияИзПотока = Число(мЧастейКлюча[0]);
		НомерПотока = Число(мЧастейКлюча[1]);
		Если ЗанятыеПотоки[НомерСообщенияИзПотока] = Неопределено Тогда
			ЗанятыеПотоки.Вставить(НомерСообщенияИзПотока, Новый Массив);
		КонецЕсли;
		ЗанятыеПотоки[НомерСообщенияИзПотока].Добавить(НомерПотока);
		Если ФЗпоНомерамСообщений[НомерСообщенияИзПотока] = Неопределено Тогда
			ФЗпоНомерамСообщений.Вставить(НомерСообщенияИзПотока, Новый Массив);
		КонецЕсли;
		ФЗпоНомерамСообщений[НомерСообщенияИзПотока].Добавить(ФЗ);
	КонецЦикла;
	
	ПорогЗаписейНаПоток = 300;
	Корень = КодОбщегоНазначенияПовтИсп.ПолучитьПоНазваниюТомаПолныйПутьКаталога("x-wb-updating-DBMS");
	ЕстьОшибки = Ложь;
	
	ФЗпоНомерамСообщений = Новый Соответствие;
	
	Пока ВыборкаНомерСообщения.Следующий() Цикл
		
		НомерПотока = 0;
		НомерСообщения = ВыборкаНомерСообщения.НомерСообщения;
		Нач = ТекущаяУниверсальнаяДатаВМиллисекундах();
		КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом(СтрШаблон("Начало обработки номера сообщения %1, кол-во объектов: %2, Различных мет-х: %3",
			НомерСообщения, ВыборкаНомерСообщения.КоличествоОбъектов, ВыборкаНомерСообщения.ИмяМетаданного), "Сообщение");
			
		НакопленоЗаписей = 0;
		Выборка = ВыборкаНомерСообщения.Выбрать();
		МассивОбъектов = Новый Массив;
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Раздельно = Истина Тогда
				Если МассивОбъектов.Количество() > 0 Тогда
					Если ЗанятыеПотоки[НомерСообщения] <> Неопределено
						И ЗанятыеПотоки[НомерСообщения].Найти(НомерПотока + 1) <> Неопределено Тогда
						МассивОбъектов.Очистить();
						НомерПотока = НомерПотока + 1;
						Сообщить(СтрШаблон("Пропущен по сообщению %1 поток %2 так как ранее уже был запущен",
							НомерСообщения, НомерПотока));
					Иначе
						ЗапуститьПотокНаВыгрузку(НомерПотока, НомерСообщения, МассивОбъектов,,
							НакопленоЗаписей, МассивФЗ, КоличествоПотоков, Корень, НужноПисатьЗИП, Узел, ЕстьОшибки, ФЗпоНомерамСообщений);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			НакопленоЗаписей = НакопленоЗаписей + Выборка.КоличествоОбъектов;
			МассивОбъектов.Добавить(Выборка.ИмяМетаданного);
			Если НакопленоЗаписей >= ПорогЗаписейНаПоток
				Или Выборка.Раздельно = Истина Тогда
				Если ЗанятыеПотоки[НомерСообщения] <> Неопределено
					И ЗанятыеПотоки[НомерСообщения].Найти(НомерПотока + 1) <> Неопределено Тогда
					МассивОбъектов.Очистить();
					НомерПотока = НомерПотока + 1;
					Сообщить(СтрШаблон("Пропущен по сообщению %1 поток %2 так как ранее уже был запущен",
						НомерСообщения, НомерПотока));
				Иначе
					ЗапуститьПотокНаВыгрузку(НомерПотока, НомерСообщения, МассивОбъектов, Выборка.Раздельно,
						НакопленоЗаписей, МассивФЗ, КоличествоПотоков, Корень, НужноПисатьЗИП, Узел, ЕстьОшибки, ФЗпоНомерамСообщений);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивОбъектов.Количество() > 0 Тогда
			Если ЗанятыеПотоки[НомерСообщения] <> Неопределено
				И ЗанятыеПотоки[НомерСообщения].Найти(НомерПотока + 1) <> Неопределено Тогда
				МассивОбъектов.Очистить();
				НомерПотока = НомерПотока + 1;
				Сообщить(СтрШаблон("Пропущен по сообщению %1 поток %2 так как ранее уже был запущен",
					НомерСообщения, НомерПотока));
			Иначе
				ЗапуститьПотокНаВыгрузку(НомерПотока, НомерСообщения, МассивОбъектов, Выборка.Раздельно,
					НакопленоЗаписей, МассивФЗ, КоличествоПотоков, Корень, НужноПисатьЗИП, Узел, ЕстьОшибки, ФЗпоНомерамСообщений);
			КонецЕсли;
		КонецЕсли;
		
		мФоновыхПодПотоков = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Состояние",
			"МодульРегламентныхИФоновыхЗаданий.ПодПотокВыгрузкиПорции", СостояниеФоновогоЗадания.Активно));
		ОграничениеПоПотокам = КоличествоПотоков - мФоновыхПодПотоков.Количество();
		ОграничениеПоПотокам = ?(ОграничениеПоПотокам < 1, 1, ОграничениеПоПотокам);
		ДождатьсяВыполненияФоновыхЗаданий(МассивФЗ,, ОграничениеПоПотокам, ЕстьОшибки);
		
		КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом(СтрШаблон("Конец обработки номера сообщения %1, кол-во объектов: %2, Различных мет-х: %3",
			НомерСообщения, ВыборкаНомерСообщения.КоличествоОбъектов, ВыборкаНомерСообщения.ИмяМетаданного), "Сообщение", Нач);
		Если ЕстьОшибки = Истина Тогда
			КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом(СтрШаблон("При выгрузки сообщения №%1 произошла ошибка в ФЗ, не будет удалено",
				НомерСообщения), "Удаление");
			Возврат;
		Иначе
			//УдалитьРегистрациюИзмененийНаУзлуПоНомеруСообщения(Узел, НомерСообщения);
			
			Для Каждого ФЗПоНомеруСообщения Из ФЗпоНомерамСообщений Цикл
				НовыйМассив = Новый Массив;
				Для Каждого ФЗИскомый Из ФЗПоНомеруСообщения.Значение Цикл
					ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ФЗИскомый.УникальныйИдентификатор);
					Если ФЗ = Неопределено Тогда
						ЕстьОшибки = Истина;
						Продолжить;
					ИначеЕсли ФЗ.Состояние = СостояниеФоновогоЗадания.Активно Тогда
						НовыйМассив.Добавить(ФЗ);
					ИначеЕсли ФЗ.Состояние <> СостояниеФоновогоЗадания.Завершено Тогда
						ЕстьОшибки = Истина;
					КонецЕсли;
				КонецЦикла;
				ФЗпоНомерамСообщений[ФЗПоНомеруСообщения.Ключ] = НовыйМассив;
				Если ЕстьОшибки = Истина Тогда
					КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом(СтрШаблон("При выгрузки сообщения №%1 произошла ошибка в ФЗ, не будет удалено",
						НомерСообщения), "Удаление");
					Возврат;
				ИначеЕсли ФЗпоНомерамСообщений[ФЗПоНомеруСообщения.Ключ].Количество() = 0 Тогда
					УдалитьРегистрациюИзмененийНаУзлуПоНомеруСообщения(Узел, ФЗПоНомеруСообщения.Ключ);
					ФЗпоНомерамСообщений.Удалить(ФЗПоНомеруСообщения.Ключ);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДождатьсяВыполненияФоновыхЗаданий(МассивФЗ,,, ЕстьОшибки);
	Если ЕстьОшибки = Истина Тогда
		КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом(СтрШаблон("При выгрузки сообщения №%1 произошла ошибка в ФЗ, не будет удалено",
			НомерСообщения), "Удаление");
		Возврат;
	Иначе
		//УдалитьРегистрациюИзмененийНаУзлуПоНомеруСообщения(Узел, НомерСообщения);
		
		Для Каждого ФЗПоНомеруСообщения Из ФЗпоНомерамСообщений Цикл
			НовыйМассив = Новый Массив;
			Для Каждого ФЗИскомый Из ФЗПоНомеруСообщения.Значение Цикл
				ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ФЗИскомый.УникальныйИдентификатор);
				Если ФЗ = Неопределено Тогда
					ЕстьОшибки = Ложь;
					Продолжить;
				ИначеЕсли ФЗ.Состояние = СостояниеФоновогоЗадания.Активно Тогда
					НовыйМассив.Добавить(ФЗ);
				ИначеЕсли ФЗ.Состояние <> СостояниеФоновогоЗадания.Завершено Тогда
					ЕстьОшибки = Истина;
				КонецЕсли;
			КонецЦикла;
			ФЗпоНомерамСообщений[ФЗПоНомеруСообщения.Ключ] = НовыйМассив;
			Если ЕстьОшибки = Истина Тогда
				КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом(СтрШаблон("При выгрузки сообщения №%1 произошла ошибка в ФЗ, не будет удалено",
					НомерСообщения), "Удаление");
				Возврат;
			ИначеЕсли ФЗпоНомерамСообщений[ФЗПоНомеруСообщения.Ключ].Количество() = 0 Тогда
				УдалитьРегистрациюИзмененийНаУзлуПоНомеруСообщения(Узел, ФЗПоНомеруСообщения.Ключ);
				ФЗпоНомерамСообщений.Удалить(ФЗПоНомеруСообщения.Ключ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапуститьПотокНаВыгрузку(НомерПотока, НомерСообщения, МассивОбъектов, Раздельно,
	НакопленоЗаписей, МассивФЗ, КоличествоПотоков, Корень, НужноПисатьЗИП, Узел, ЕстьОшибки, ФЗпоНомерамСообщений) Экспорт
	
	мФоновыхПодПотоков = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Состояние",
		"МодульРегламентныхИФоновыхЗаданий.ПодПотокВыгрузкиПорции", СостояниеФоновогоЗадания.Активно));
	ОграничениеПоПотокам = КоличествоПотоков - мФоновыхПодПотоков.Количество();
	ОграничениеПоПотокам = ?(ОграничениеПоПотокам < 1, 1, ОграничениеПоПотокам);
	
	ДождатьсяВыполненияФоновыхЗаданий(МассивФЗ,, ОграничениеПоПотокам, ЕстьОшибки);
	
	НомерПотока = НомерПотока + 1;
	мПараметры = Новый Массив;
	мПараметры.Добавить(НомерСообщения);
	мПараметры.Добавить(МассивОбъектов);
	мПараметры.Добавить(Раздельно);
	мПараметры.Добавить(НакопленоЗаписей);
	мПараметры.Добавить(Корень);
	мПараметры.Добавить(НужноПисатьЗИП);
	мПараметры.Добавить(Узел);
	мПараметры.Добавить(НомерПотока);
	мПараметры.Добавить(КоличествоПотоков);
	ФЗ = ФоновыеЗадания.Выполнить("МодульРегламентныхИФоновыхЗаданий.ПотокВыгрузкиИзменений", мПараметры, СтрШаблон("%1_%2",
		Формат(НомерСообщения, "ЧГ=0"), Формат(НомерПотока, "ЧГ=0")), СтрШаблон("Выгрузка номера сообщения %1 поток %2",
		НомерСообщения, НомерПотока));
	МассивФЗ.Добавить(ФЗ);
	
	Если ФЗпоНомерамСообщений[НомерСообщения] = Неопределено Тогда
		ФЗпоНомерамСообщений.Вставить(НомерСообщения, Новый Массив);
	КонецЕсли;
	ФЗпоНомерамСообщений[НомерСообщения].Добавить(ФЗ);
	
	ДождатьсяВыполненияФоновыхЗаданий(МассивФЗ,, ОграничениеПоПотокам, ЕстьОшибки);
	
	МассивОбъектов.Очистить();
	НакопленоЗаписей = 0;
	
КонецПроцедуры

Процедура ПотокВыгрузкиИзменений(НомерСообщения, МассивОбъектов, Раздельно, НакопленоЗаписей, Корень,
	НужноПисатьЗИП, Узел, НомерПотока, КоличествоПотоков) Экспорт
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачВсегоСообщения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если Раздельно = Истина Тогда
		ИтоговыйТекст = СтрШаблон(
			"ВЫБРАТЬ
			|	""%1"" КАК ИмяМетаданного,
			|	Табл.*
			|ИЗ
			|	%1.Изменения КАК Табл
			|ГДЕ
			|	Табл.Узел = &Узел
			|	И Табл.НомерСообщения = &НомерСообщения", МассивОбъектов[0]);
	Иначе                                                                  
		Шаблон =
			"ВЫБРАТЬ
			|	""%1"" КАК ИмяМетаданного,
			|	Табл.Регистратор КАК Ссылка,
			|	ЛОЖЬ КАК УдалениеОбъекта
			|ИЗ
			|	%1.Изменения КАК Табл
			|ГДЕ
			|	Табл.Узел = &Узел
			|	И Табл.НомерСообщения = &НомерСообщения";
		ШаблонДляСсылочных =
			"ВЫБРАТЬ
			|	""%1"" КАК ИмяМетаданного,
			|	Табл.Ссылка КАК Ссылка,
			|	ТаблСсылка.Ссылка ЕСТЬ NULL КАК УдалениеОбъекта
			|ИЗ
			|	%1.Изменения КАК Табл
			|	ЛЕВОЕ СОЕДИНЕНИЕ %1 КАК ТаблСсылка
			|	ПО Табл.Ссылка = ТаблСсылка.Ссылка
			|ГДЕ
			|	Табл.Узел = &Узел
			|	И Табл.НомерСообщения = &НомерСообщения";
		мТекстовЗапроса = Новый Массив;
		ДобавитьПоСпискуТаблицТекстыВыбораИзменений(МассивОбъектов, Шаблон, мТекстовЗапроса, ШаблонДляСсылочных);
		ИтоговыйТекст = СтрСоединить(мТекстовЗапроса, Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС);
	КонецЕсли;
	
	Запрос = Новый Запрос(ИтоговыйТекст);
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.УстановитьПараметр("НомерСообщения", НомерСообщения);
	
	Нач = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РезультатВыборки = Запрос.Выполнить();
	Выборка = РезультатВыборки.Выбрать();
	КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом(СтрШаблон("Конец. Выбрано записей %1",
		Выборка.Количество()), "Запрос изменений из БД", Нач);
		
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	РазмерПотока = 300;
	КолПотоков = Цел(Выборка.Количество() / РазмерПотока);
	КолПотоков = ?(КолПотоков = 0, 1, КолПотоков);
	НаПоток = Цел(Выборка.Количество() / КолПотоков) + ?(Выборка.Количество() % КолПотоков = 0, 0, 1);
	
	ПоляДляСтруктуры = КодОбщегоНазначения.ПолучитьПоляДляСтруктурыПоРезультатуЗапроса(РезультатВыборки);
	МассивВыгрузки = Новый Массив;
	НомерПодПотока = 0;
	МассивФЗ = Новый Массив;
	ЕстьОшибки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		СтруктураВыгрузки = Новый Структура(ПоляДляСтруктуры);
		ЗаполнитьЗначенияСвойств(СтруктураВыгрузки, Выборка);
		МассивВыгрузки.Добавить(СтруктураВыгрузки);
		
		Если МассивВыгрузки.Количество() >= НаПоток Тогда
			ЗапуститьПодПотокНаВыгрузку(НомерПотока, НомерПодПотока, НомерСообщения, МассивВыгрузки,
				МассивФЗ, КоличествоПотоков, Корень, НужноПисатьЗИП, Узел, ЕстьОшибки, КолПотоков);
		КонецЕсли;
		
		Если ЕстьОшибки = Истина Тогда
			КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом(
				"В одном из потоков произошла ошибка, будет прервано выполнение РЗ",
				"Ошибка");
			ВызватьИсключение "Произошла ошибка в вызванном фоновом задании";
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивВыгрузки.Количество() > 0 Тогда
		ЗапуститьПодПотокНаВыгрузку(НомерПотока, НомерПодПотока, НомерСообщения, МассивВыгрузки,
			МассивФЗ, КоличествоПотоков, Корень, НужноПисатьЗИП, Узел, ЕстьОшибки, КолПотоков);
	КонецЕсли;
	ДождатьсяВыполненияФоновыхЗаданий(МассивФЗ,,, ЕстьОшибки);
	
	Если ЕстьОшибки = Истина Тогда
		КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом(
			"В одном из потоков произошла ошибка, будет прервано выполнение РЗ",
			"Ошибка");
		ВызватьИсключение "Произошла ошибка в вызванном фоновом задании";
	КонецЕсли;
	
	Если Выборка.Количество() > 0 Тогда
		КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом(СтрШаблон("Конец. Кол-во всех изменений %1", Выборка.Количество()),
			"Запись всех файлов потока", НачВсегоСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапуститьПодПотокНаВыгрузку(НомерПотока, НомерПодПотока, НомерСообщения, МассивОбъектов,
	МассивФЗ, КоличествоПотоков, Корень, НужноПисатьЗИП, Узел, ЕстьОшибки, ВсегоПодпотоков) Экспорт
	
	НомерПодПотока = НомерПодПотока + 1;
	Если ВсегоПодпотоков <= 1 Тогда
		ПодПотокВыгрузкиПорции(НомерСообщения, МассивОбъектов, Корень, НужноПисатьЗИП, Узел, НомерПотока, НомерПодПотока);
	Иначе
		
		мФоновыхПотоков = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Состояние",
			"МодульРегламентныхИФоновыхЗаданий.ПотокВыгрузкиИзменений", СостояниеФоновогоЗадания.Активно));
		мФоновыхПодПотоков = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Состояние",
			"МодульРегламентныхИФоновыхЗаданий.ПодПотокВыгрузкиПорции", СостояниеФоновогоЗадания.Активно));
		ОграничениеПоПотокам = КоличествоПотоков - (мФоновыхПотоков.Количество() + мФоновыхПодПотоков.Количество() - МассивФЗ.Количество());
		
		Если ОграничениеПоПотокам > 1 Тогда
			мПараметры = Новый Массив;
			мПараметры.Добавить(НомерСообщения);
			мПараметры.Добавить(МассивОбъектов);
			мПараметры.Добавить(Корень);
			мПараметры.Добавить(НужноПисатьЗИП);
			мПараметры.Добавить(Узел);
			мПараметры.Добавить(НомерПотока);
			мПараметры.Добавить(НомерПодПотока);
			ФЗ = ФоновыеЗадания.Выполнить("МодульРегламентныхИФоновыхЗаданий.ПодПотокВыгрузкиПорции", мПараметры, СтрШаблон("%1_%2_%3",
				Формат(НомерСообщения, "ЧГ=0"), Формат(НомерПотока, "ЧГ=0"), Формат(НомерПодПотока, "ЧГ=0")), СтрШаблон(
				"Выгрузка номера сообщения %1 поток %2 подпоток %3", НомерСообщения, НомерПотока, НомерПодПотока));
			МассивФЗ.Добавить(ФЗ);
			ДождатьсяВыполненияФоновыхЗаданий(МассивФЗ,, КоличествоПотоков, ЕстьОшибки);
		Иначе
			ПодПотокВыгрузкиПорции(НомерСообщения, МассивОбъектов, Корень, НужноПисатьЗИП, Узел, НомерПотока, НомерПодПотока);
		КонецЕсли;
	КонецЕсли;
	МассивОбъектов.Очистить();
	
КонецПроцедуры

Процедура ПодПотокВыгрузкиПорции(НомерСообщения, МассивВыгрузки, Корень, НужноПисатьЗИП, Узел, НомерПотока, НомерПодПотока) Экспорт
	
	НомерПорции = 0;
	//НачВсегоСообщения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ЗаписьXML = Неопределено;
	Нач = Неопределено;
	КоличествоИзменений = 0;
	КоличествоИзмененийВсего = 0;
	ИмяВременного = "";
	ЗаписьОднойПорцииИНачалоНовой(ЗаписьXML, Нач, КоличествоИзменений, НомерПорции, НомерПотока, ИмяВременного,
		Корень, НужноПисатьЗИП, НомерСообщения,, НомерПодПотока);
	ТекИмяМета = Неопределено;
	МетаОб = Неопределено;
	Для Каждого Выборка Из МассивВыгрузки Цикл
		Если ТекИмяМета <> Выборка.ИмяМетаданного Тогда
			МетаОб = Метаданные.НайтиПоПолномуИмени(Выборка.ИмяМетаданного);
			ТекИмяМета = Выборка.ИмяМетаданного;
		КонецЕсли;
		Если СтрНачинаетсяС(Выборка.ИмяМетаданного, "РегистрСведений") Тогда
			ИзмененныйОбъект = РегистрыСведений[МетаОб.Имя].СоздатьНаборЗаписей();
			Если МетаОб.РежимЗаписи <> Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
				Если МетаОб.ОсновнойОтборПоПериоду Тогда//МетаОб.ПериодичностьРегистраСведений <>
				//	Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
					ИзмененныйОбъект.Отбор.Период.Установить(Выборка.Период);
				КонецЕсли;
				Для Каждого МетаИзм Из МетаОб.Измерения Цикл
					Если Не МетаИзм.ОсновнойОтбор Тогда
						Продолжить;
					КонецЕсли;
					//ИзмененныйОбъект.Отбор[МетаИзм.Имя].Установить(Выборка[МетаИзм.Имя]);
					Попытка
						ИзмененныйОбъект.Отбор[МетаИзм.Имя].Установить(Выборка[МетаИзм.Имя]);
					Исключение
						Сообщить(СтрШаблон("%1 %2 %3", Выборка.ИмяМетаданного, МетаОб, МетаИзм.Имя));
						Для Каждого Кол Из Выборка Цикл
							Сообщить(СтрШаблон("%1 - %2", Кол.Ключ, Кол.Значение));
						КонецЦикла;
						ВызватьИсключение "Косячок старичек";
					КонецПопытки;
				КонецЦикла;
			Иначе
				ИзмененныйОбъект.Отбор.Регистратор.Установить(Выборка.Ссылка);
			КонецЕсли;
			Попытка
				ИзмененныйОбъект.Прочитать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru='Не уадлось прочитать %1 по причине %2'"),
					Выборка.ИмяМетаданного, ОписаниеОшибки()));
				РаботаС_Sentry.ОтправитьЛогПоИсключению(ИнформацияОбОшибке(), "warning",,
					"ПодПотокВыгрузкиПорции", Выборка.ИмяМетаданного);
				ПланыОбмена.ЗарегистрироватьИзменения(Узел, ИзмененныйОбъект);
				Продолжить;
			КонецПопытки;
			
		ИначеЕсли СтрНачинаетсяС(Выборка.ИмяМетаданного, "РегистрНакопления") Тогда
			ИзмененныйОбъект = РегистрыНакопления[МетаОб.Имя].СоздатьНаборЗаписей();
			ИзмененныйОбъект.Отбор.Регистратор.Установить(Выборка.Ссылка);
			Попытка
				ИзмененныйОбъект.Прочитать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru='Не уадлось прочитать %1 - %2 по причине %3'"),
					Выборка.ИмяМетаданного, Выборка.Ссылка, ОписаниеОшибки()));
				РаботаС_Sentry.ОтправитьЛогПоИсключению(ИнформацияОбОшибке(), "warning",,
					"ПодПотокВыгрузкиПорции", Выборка.ИмяМетаданного);
				ПланыОбмена.ЗарегистрироватьИзменения(Узел, ИзмененныйОбъект);
				Продолжить;
			КонецПопытки;
		ИначеЕсли СтрНачинаетсяС(Выборка.ИмяМетаданного, "РегистрБухгалтерии") Тогда
			ИзмененныйОбъект = РегистрыБухгалтерии[МетаОб.Имя].СоздатьНаборЗаписей();
			ИзмененныйОбъект.Отбор.Регистратор.Установить(Выборка.Ссылка);
			Попытка
				ИзмененныйОбъект.Прочитать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru='Не уадлось прочитать %1 - %2 по причине %3'"),
					Выборка.ИмяМетаданного, Выборка.Ссылка, ОписаниеОшибки()));
				РаботаС_Sentry.ОтправитьЛогПоИсключению(ИнформацияОбОшибке(), "warning",,
					"ПодПотокВыгрузкиПорции", Выборка.ИмяМетаданного);
				ПланыОбмена.ЗарегистрироватьИзменения(Узел, ИзмененныйОбъект);
				Продолжить;
			КонецПопытки;
		Иначе
			Попытка
				Если Выборка.УдалениеОбъекта Тогда
					ИзмененныйОбъект = Новый УдалениеОбъекта(Выборка.Ссылка);
				Иначе
					ИзмененныйОбъект = Выборка.Ссылка.ПолучитьОбъект();
				КонецЕсли;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru='Не уадлось прочитать %1 - %2 по причине %3'"),
					Выборка.ИмяМетаданного, Выборка.Ссылка, ОписаниеОшибки()));
				РаботаС_Sentry.ОтправитьЛогПоИсключению(ИнформацияОбОшибке(), "warning",,
					"ПодПотокВыгрузкиПорции", Выборка.ИмяМетаданного);
				ПланыОбмена.ЗарегистрироватьИзменения(Узел, Выборка.Ссылка);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		ЗаписатьXML(ЗаписьXML, ИзмененныйОбъект, НазначениеТипаXML.Явное);
		КоличествоИзменений = КоличествоИзменений + 1;
		КоличествоИзмененийВсего = КоличествоИзмененийВсего + 1;
		Если КоличествоИзменений >= 100 Тогда
			ЗаписьОднойПорцииИНачалоНовой(ЗаписьXML, Нач, КоличествоИзменений, НомерПорции, НомерПотока, ИмяВременного,
				Корень, НужноПисатьЗИП, НомерСообщения,, НомерПодПотока);
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоИзменений > 0 Тогда
		ЗаписьОднойПорцииИНачалоНовой(ЗаписьXML, Нач, КоличествоИзменений, НомерПорции, НомерПотока, ИмяВременного,
			Корень, НужноПисатьЗИП, НомерСообщения, Ложь, НомерПодПотока);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписьОднойПорцииИНачалоНовой(ЗаписьXML = Неопределено, Нач = Неопределено, КоличествоИзменений, НомерПорции,
	НомерПотока, ИмяВременного, Корень, НужноПисатьЗИП, НомерСообщения, ОткрытьНовуюЗапись = Истина, НомерПодПотока) Экспорт
	
	Если ЗаписьXML <> Неопределено Тогда
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.Закрыть();
		ЗаписьXML = Неопределено;
		
		КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом(СтрШаблон("Конец порции %2. Кол-во изменений %1",
			КоличествоИзменений, НомерПорции), "Запись файла сообщения", Нач);
			
		Если НужноПисатьЗИП = Истина Тогда
			ИмяФайлаЗИП = СтрШаблон("%1unloaded/%2_%3_%4_%5_%6.zip", Корень, Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-dd-HH-mm-ss"),
				Формат(НомерСообщения, "ЧН=0; ЧГ=0"), Формат(НомерПотока, "ЧН=0; ЧГ=0"),
				Формат(НомерПодПотока, "ЧН=0; ЧГ=0"), Формат(НомерПорции, "ЧН=0; ЧГ=0"));
				
			Нач = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ЗаписьЗип = Новый ЗаписьZipФайла(ИмяФайлаЗИП,,, МетодСжатияZIP.BZIP2, УровеньСжатияZIP.Максимальный);
			ЗаписьЗип.Добавить(ИмяВременного);
			ЗаписьЗип.Записать();
			КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом("Конец", "Запись ЗИП архива", Нач);
			
			Попытка
				УдалитьФайлы(ИмяВременного);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если ОткрытьНовуюЗапись = Истина Тогда
		НомерПорции = НомерПорции + 1;
		
		Нач = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Если НужноПисатьЗИП = Истина Тогда
			ИмяВременного = ПолучитьИмяВременногоФайла("xml");
		Иначе
			ИмяВременного = СтрШаблон("%1unloaded/%2_%3_%4_%5_%6.xml", Корень, Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-dd-HH-mm-ss"),
				Формат(НомерСообщения, "ЧН=0; ЧГ=0"), Формат(НомерПотока, "ЧН=0; ЧГ=0"),
				Формат(НомерПодПотока, "ЧН=0; ЧГ=0"), Формат(НомерПорции, "ЧН=0; ЧГ=0"));
		КонецЕсли;
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяВременного);
		ЗаписьXML.ЗаписатьНачалоЭлемента("data");
		КоличествоИзменений = 0;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗарегистрироватьИзмененияНаУзлу(Узел, МассивДанных = Неопределено, НомерСообщения, УвеличитьномерСообщения = Ложь, НакопленноеКоличество) Экспорт
	
	Попытка
		Нач = ТекущаяУниверсальнаяДатаВМиллисекундах();
		//ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
		//Запись = Новый ЗаписьXML;
		//Запись.УстановитьСтроку();
		//ЗаписьСообщения.НачатьЗапись(Запись, Узел);
		//Выборка = ПланыОбмена.ВыбратьИзменения(ЗаписьСообщения.Получатель, ЗаписьСообщения.НомерСообщения, МассивДанных);
		Выборка = ПланыОбмена.ВыбратьИзменения(Узел, НомерСообщения, МассивДанных);
		//НомерСообщения = ЗаписьСообщения.НомерСообщения;
		//ЗаписьСообщения.ЗакончитьЗапись();
		//Запись.Закрыть();
		//Запись = Неопределено;
		КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом(СтрШаблон("Конец номер сообщения %1. Кол-во: %2",
			НомерСообщения, ?(ТипЗнч(МассивДанных) = Тип("Массив"), МассивДанных.Количество(), МассивДанных)),
			"Формирование номера сообщения", Нач);
	Исключение
		КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом(СтрШаблон("Не удалось выбрать изменения по причине %1",
			ОписаниеОшибки()), "Выборка изменений", Нач);
	КонецПопытки;
		
	Если МассивДанных <> Неопределено Тогда
		МассивДанных.Очистить();
	КонецЕсли;
	
	Если УвеличитьномерСообщения Тогда
		НомерСообщения = НомерСообщения + 1;
		НакопленноеКоличество = 0;
	КонецЕсли;
	
	Возврат Выборка;
	
КонецФункции

Процедура УдалитьРегистрациюИзмененийНаУзлуПоНомеруСообщения(Узел, НомерСообщения) Экспорт
	
	Нач = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НомерСообщения);
	КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом("Конец", СтрШаблон("Удаление номера сообщения %1", НомерСообщения), Нач);
	
КонецПроцедуры

Процедура ДобавитьПоМетаданнымТекстыВыбораИзменений(ИмяМенеджера, СоставПО, Шаблон, мТекстовЗапроса, СРегистратором = Ложь) Экспорт
	
	Для Каждого МетаОбъект Из Метаданные[ИмяМенеджера] Цикл
		Если Не СоставПО.Содержит(МетаОбъект) Тогда
			Продолжить;
		КонецЕсли;
		Раздельно = "ЛОЖЬ";
		Если ИмяМенеджера = "РегистрыСведений" Тогда
			Раздельно = "ИСТИНА";
			Если МетаОбъект.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
				Раздельно = "ЛОЖЬ";
				Если Не СРегистратором Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли СРегистратором Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
			
		Текст = СтрШаблон(Шаблон, МетаОбъект.ПолноеИмя(), Раздельно);
		
		мТекстовЗапроса.Добавить(Текст);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоСпискуТаблицТекстыВыбораИзменений(МассивТаблиц, Шаблон, мТекстовЗапроса, ШаблонДляСсылочных) Экспорт
	
	Для Каждого ЭлементТаблицы Из МассивТаблиц Цикл
		
		Если СтрНачинаетсяС(ЭлементТаблицы, "РегистрСведений")
			Или СтрНачинаетсяС(ЭлементТаблицы, "РегистрНакопления")
			Или СтрНачинаетсяС(ЭлементТаблицы, "РегистрБухгалтерии") Тогда
			Текст = СтрШаблон(Шаблон, ЭлементТаблицы);
			//ВыбПоле = "Регистратор";
		Иначе
			Текст = СтрШаблон(ШаблонДляСсылочных, ЭлементТаблицы);
			//ВыбПоле = "Ссылка";
		КонецЕсли;
		//Текст = СтрШаблон(Шаблон, ЭлементТаблицы, ВыбПоле);
		мТекстовЗапроса.Добавить(Текст);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаПоИзменениямПланаОбмена(Шаблон, ВыбиратьСсылочные = Истина,
	ВыбиратьРегистрыСРегистратором = Истина, ВыбиратьРегистрыБезРегистратора = Истина, Узел) Экспорт
	
	//СоставПО = Метаданные.ПланыОбмена.ДляПереходаНаНовуюБД.Состав;
	СоставПО = Узел.Метаданные().Состав;
	мТекстовЗапроса = Новый Массив;
	
	Если ВыбиратьСсылочные = Истина Тогда
		ДобавитьПоМетаданнымТекстыВыбораИзменений("Справочники", СоставПО, Шаблон, мТекстовЗапроса);
		ДобавитьПоМетаданнымТекстыВыбораИзменений("Документы", СоставПО, Шаблон, мТекстовЗапроса);
		ДобавитьПоМетаданнымТекстыВыбораИзменений("ПланыВидовХарактеристик", СоставПО, Шаблон, мТекстовЗапроса);
		ДобавитьПоМетаданнымТекстыВыбораИзменений("ПланыСчетов", СоставПО, Шаблон, мТекстовЗапроса);
		ДобавитьПоМетаданнымТекстыВыбораИзменений("Задачи", СоставПО, Шаблон, мТекстовЗапроса);
	КонецЕсли;
	
	Если ВыбиратьРегистрыСРегистратором = Истина Тогда
		ДобавитьПоМетаданнымТекстыВыбораИзменений("РегистрыСведений", СоставПО, Шаблон, мТекстовЗапроса, Истина);
		ДобавитьПоМетаданнымТекстыВыбораИзменений("РегистрыНакопления", СоставПО, Шаблон, мТекстовЗапроса);
		ДобавитьПоМетаданнымТекстыВыбораИзменений("РегистрыБухгалтерии", СоставПО, Шаблон, мТекстовЗапроса);
	КонецЕсли;
	
	Если ВыбиратьРегистрыБезРегистратора = Истина Тогда
		ДобавитьПоМетаданнымТекстыВыбораИзменений("РегистрыСведений", СоставПО, Шаблон, мТекстовЗапроса, Ложь);
	КонецЕсли;
	
	Возврат мТекстовЗапроса;
	
КонецФункции

Функция ПолучитьИтоговыйТекстЗапросаПоЗарегистрированнымОбъектам(ЕщеНеЗарегистрированы = Ложь, Узел) Экспорт
	
	Шаблон =
		"ВЫБРАТЬ
		|	Табл.НомерСообщения КАК НомерСообщения,
		|	СУММА(1) КАК КоличествоОбъектов,
		|	""%1"" КАК ИмяМетаданного,
		|	%2 КАК Раздельно
		|ИЗ
		|	%1.Изменения КАК Табл
		|ГДЕ
		|	Табл.Узел = &Узел"
		+ ?(ЕщеНеЗарегистрированы = Ложь, "
		|	И Табл.НомерСообщения > 0", "
		|	И Табл.НомерСообщения ЕСТЬ NULL") + "
		|
		|СГРУППИРОВАТЬ ПО
		|	Табл.НомерСообщения";
	
	мТекстовЗапроса = ПолучитьТекстЗапросаПоИзменениямПланаОбмена(Шаблон,,,,Узел);
	ИтоговыйТекст = СтрСоединить(мТекстовЗапроса, Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС);
	
	ИтоговыйТекст = СтрШаблон(
		"ВЫБРАТЬ
		|	Табл.НомерСообщения КАК НомерСообщения,
		|	Табл.КоличествоОбъектов КАК КоличествоОбъектов,
		|	Табл.ИмяМетаданного КАК ИмяМетаданного,
		|	Табл.Раздельно КАК Раздельно
		|ПОМЕСТИТЬ ИтогиПоЗарегистрированнымОбъектам
		|ИЗ
		|	(%1) КАК Табл
		|
		|ГДЕ
		|	НЕ Табл.КоличествоОбъектов ЕСТЬ NULL
		|;
		|
		|ВЫБРАТЬ
		|	Табл.НомерСообщения КАК НомерСообщения,
		|	Табл.КоличествоОбъектов КАК КоличествоОбъектов,
		|	Табл.ИмяМетаданного КАК ИмяМетаданного,
		|	Табл.Раздельно КАК Раздельно
		|ИЗ
		|	ИтогиПоЗарегистрированнымОбъектам КАК Табл
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСообщения, Раздельно, КоличествоОбъектов
		|ИТОГИ
		|	МАКСИМУМ(НомерСообщения),
		|	СУММА(КоличествоОбъектов),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИмяМетаданного)
		|ПО
		|	НомерСообщения", ИтоговыйТекст);
	
	Возврат ИтоговыйТекст;
	
КонецФункции

Процедура ЗагрузкаПартииИзмененийПриПереходеНаНовуюБД(КоличествоПотоков = 5) Экспорт
	
	Если КоличествоПотоков = Неопределено Тогда
		КоличествоПотоков = 5;
	КонецЕсли;
	
	Настройки = КодОбщегоНазначения.ПолучитьДополнительнуюНастройкуПрограммы(,, "Переход на новую БД");
	Узел = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(Настройки, "Узел");
	Если Не ЗначениеЗаполнено(Узел) Тогда
		Узел = ПланыОбмена.ДляПереходаНаНовуюБД.ПустаяСсылка();
	КонецЕсли;
	
	Корень = КодОбщегоНазначенияПовтИсп.ПолучитьПоНазваниюТомаПолныйПутьКаталога("x-wb-updating-DBMS");
	Нач = ТекущаяУниверсальнаяДатаВМиллисекундах();
	мНайденныеФайлы = НайтиФайлы(СтрШаблон("%1unloaded/", Корень), "*.zip");
	КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом("Конец", "Поиск файлов zip для загрузки", Нач);
	
	//Если мНайденныеФайлы.Количество() = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	
	МассивФЗ = Новый Массив;
	СписокФайлов = Новый СписокЗначений;
	Для Каждого НайденныйФайл Из мНайденныеФайлы Цикл
		мИмени = СтрРазделить(НайденныйФайл.Имя, "_", Ложь);
		Попытка
			НомерСоощения = Число(мИмени[1]);
		Исключение
			НомерСоощения = 0;
		КонецПопытки;
		СписокФайлов.Добавить(НайденныйФайл.ПолноеИмя, Формат(НомерСоощения, "ЧЦ=10; ЧН=000000000; ЧВН=; ЧГ=0"));
	КонецЦикла;
	
	Нач = ТекущаяУниверсальнаяДатаВМиллисекундах();
	мНайденныеФайлы = НайтиФайлы(СтрШаблон("%1unloaded/", Корень), "*.xml");
	КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом("Конец", "Поиск файлов zip для загрузки", Нач);
	
	Для Каждого НайденныйФайл Из мНайденныеФайлы Цикл
		мИмени = СтрРазделить(НайденныйФайл.Имя, "_", Ложь);
		Попытка
			НомерСоощения = Число(мИмени[1]);
		Исключение
			НомерСоощения = 0;
		КонецПопытки;
		СписокФайлов.Добавить(НайденныйФайл.ПолноеИмя, Формат(НомерСоощения, "ЧЦ=10; ЧН=000000000; ЧВН=; ЧГ=0"));
	КонецЦикла;
	
	//СписокФайлов.СортироватьПоЗначению();
	СписокФайлов.СортироватьПоПредставлению();
	
	Если СписокФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru='Найдено файлов к загрузке %1'"), СписокФайлов.Количество()));
	
	мФоновыхПотоков = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Состояние",
		"МодульРегламентныхИФоновыхЗаданий.ЗагрузитьОдинФайлИзмененийПриПереходеНаНовуюБД", СостояниеФоновогоЗадания.Активно));
	СписокАктивныхВыгружаемыхФайлов = Новый Массив;
	Для Каждого ФЗ Из мФоновыхПотоков Цикл
		МассивФЗ.Добавить(ФЗ);
		СписокАктивныхВыгружаемыхФайлов.Добавить(ФЗ.Ключ);
	КонецЦикла;
	
	ТекНомерСообщения = Неопределено;
	ЕстьОшибки = Ложь;
	Нач = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Для Каждого ЭлементФайла Из СписокФайлов Цикл
		//ЗагрузитьОдинФайлИзмененийПриПереходеНаНовуюБД(ЭлементФайла.Значение);
		
		ФайлПроверка = Новый Файл(ЭлементФайла.Значение);
		Если Не ФайлПроверка.Существует() Тогда
			КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом(СтрШаблон(НСтр("ru='Не найден файл %1'"), ЭлементФайла.Значение),
				"Пропуск");
			Продолжить;
		КонецЕсли;
		
		ИмяФайла = Сред(ЭлементФайла.Значение, СтрНайти(ЭлементФайла.Значение, "/", НаправлениеПоиска.СКонца) + 1);
		//мИмени = СтрРазделить(ИмяФайла, "_", Ложь);
		Попытка
			НомерСоощения = Число(ЭлементФайла.Представление);
		Исключение
			НомерСоощения = 0;
		КонецПопытки;
		
		Если ТекНомерСообщения <> НомерСоощения Тогда
			ТекНомерСообщения = НомерСоощения;
			КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом(СтрШаблон("Приступили к номеру сообщения %1", НомерСоощения),
				"Ожидание предыдущих заданий", Нач);
			ДождатьсяВыполненияФоновыхЗаданий(МассивФЗ,, КоличествоПотоков, ЕстьОшибки);
			Нач = ТекущаяУниверсальнаяДатаВМиллисекундах();
		КонецЕсли;
		
		Если ЕстьОшибки = Истина Тогда
			КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом(СтрШаблон(
				"В одном из потоков произошла ошибка, будет прервано выполнение РЗ %1", НомерСоощения),
				"Ошибка", Нач);
			ВызватьИсключение "Произошла ошибка в вызванном фоновом задании";
		КонецЕсли;
		
		Если СписокАктивныхВыгружаемыхФайлов.Найти(ИмяФайла) <> Неопределено Тогда
			Продолжить;
		Иначе
			мПараметры = Новый Массив;
			мПараметры.Добавить(ЭлементФайла.Значение);
			мПараметры.Добавить(Узел);
			ФЗ = ФоновыеЗадания.Выполнить("МодульРегламентныхИФоновыхЗаданий.ЗагрузитьОдинФайлИзмененийПриПереходеНаНовуюБД",
				мПараметры, ИмяФайла, СтрШаблон("Загрузка файла изменений %1", ЭлементФайла.Значение));
			МассивФЗ.Добавить(ФЗ);
			ДождатьсяВыполненияФоновыхЗаданий(МассивФЗ,, КоличествоПотоков, ЕстьОшибки);
			Если ЕстьОшибки = Истина Тогда
				КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом(СтрШаблон(
					"В одном из потоков произошла ошибка, будет прервано выполнение РЗ %1", НомерСоощения),
					"Ошибка", Нач);
				ВызватьИсключение "Произошла ошибка в вызванном фоновом задании";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ДождатьсяВыполненияФоновыхЗаданий(МассивФЗ,,, ЕстьОшибки);
	//Если ЕстьОшибки = Истина Тогда
	//	КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом(СтрШаблон(
	//		"В одном из потоков произошла ошибка, будет прервано выполнение РЗ %1", НомерСоощения),
	//		"Ошибка", Нач);
	//	ВызватьИсключение "Произошла ошибка в вызванном фоновом задании";
	//КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьОдинФайлИзмененийПриПереходеНаНовуюБД(ПолноеИмя, Узел) Экспорт
	
	ФайлПроверка = Новый Файл(ПолноеИмя);
	Если Не ФайлПроверка.Существует() Тогда
		Сообщить(СтрШаблон("Не найден файл %1", ПолноеИмя));
		Возврат;
	КонецЕсли;
	
	КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом("Начало", СтрШаблон("Чтение файла: %1", ПолноеИмя));
	
	Если СтрЗаканчиваетсяНа(ПолноеИмя, ".zip") Тогда
		Нач = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ЧтениеЗип = Новый ЧтениеZipФайла(ПолноеИмя);
		ВремКаталог = СтрШаблон("%1%2/", КаталогВременныхФайлов(), Строка(Новый УникальныйИдентификатор));
		Если ЧтениеЗип.Элементы.Количество() = 0 Тогда
			РаботаС_Sentry.ОтправитьЛогПоИсключению(ИнформацияОбОшибке(),,, "ЗагрузкаПартииИзмененийПриПереходеНаНовуюБД",,
				"Архив ЗИП оказался пустой");
			Возврат;
		КонецЕсли;
		ЭлементЗип = ЧтениеЗип.Элементы[0];
		ЧтениеЗип.Извлечь(ЭлементЗип, ВремКаталог);
		ИмяТекстФайла = СтрШаблон("%1%2", ВремКаталог, ЭлементЗип.Имя);
		КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом("Конец", "Чтение ЗИП", Нач);
		ЧтениеЗип = Неопределено;
	Иначе
		ИмяТекстФайла = ПолноеИмя;
	КонецЕсли;
	
	Нач = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ИмяТекстФайла);
	Чтение.ПерейтиКСодержимому();
	КоличествоЗагружено = 0;
	//НачатьТранзакцию();
	Пока Истина Цикл
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "data" Тогда
			Чтение.Прочитать();
			Продолжить;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "data" Тогда
			Прервать;
		КонецЕсли;
		ИмяДоЧтения = Чтение.Имя;
		СчитанныйОбъект = ПрочитатьXML(Чтение);
		Если СчитанныйОбъект = Неопределено Тогда
			Сообщить(СтрШаблон("Прочитали неопределено %1 %2 %3",
				ИмяДоЧтения, КоличествоЗагружено, Чтение.Имя));
			Если Чтение.Имя = "data" Или ИмяДоЧтения = "data" Тогда
				Продолжить;
			Иначе
				Продолжить;
				ВызватьИсключение "При чтении ошибка";
			КонецЕсли;
		КонецЕсли;
		Попытка
			Если ТипЗнч(СчитанныйОбъект) <> Тип("УдалениеОбъекта") Тогда
				СчитанныйОбъект.ДополнительныеСвойства.Вставить("ПропуститьЗаписьВерсииОбъекта", Истина);
			КонецЕсли;
			СчитанныйОбъект.ОбменДанными.Загрузка = Истина;
			СчитанныйОбъект.ОбменДанными.Отправитель = Узел;
		Исключение
			Сообщить(ОписаниеОшибки());
			ТекстДок = Новый ТекстовыйДокумент;
			ТекстДок.Прочитать(ИмяТекстФайла);
			Сообщить(СтрШаблон("%1, %2, %3, %4
			|%5", СчитанныйОбъект, ТипЗнч(СчитанныйОбъект),
				Чтение.Имя, КоличествоЗагружено, ИмяДоЧтения));//ТекстДок.ПолучитьТекст()));
			ВызватьИсключение "При чтении ошибка";
		КонецПопытки;
		Попытка
			СчитанныйОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru='Не удалось записать %1, по причине %2'"),
				СчитанныйОбъект, ОписаниеОшибки()));
				
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			ЗаписатьXML(ЗаписьXML, СчитанныйОбъект, НазначениеТипаXML.Явное);
			СтрокаXML = ЗаписьXML.Закрыть();
			
			мз = РегистрыСведений.ОчередьАсинхронныхСообщенийОбмена.СоздатьМенеджерЗаписи();
			ТекущийМетод = ОбменСообщениямиССервисами.ПолучитьМетодОбменаСообщениямиПоКоду("ЗагрузкаДанныхИз1С", Истина, 30);
			мз.ИдентификаторСообщения = Строка(Новый УникальныйИдентификатор);
			мз.Метод = ТекущийМетод;
			мз.Направление = ПредопределенноеЗначение("Перечисление.ТипНаправленияСообщенияОбменаСервиса.Входящий");
			мз.Тело = СтрокаXML;
			мз.ДатаСобытия = ТекущаяДатаСеанса();
			мз.Заголовки = СтрЗаменить(ПолноеИмя, "/unloaded/", "/uploaded/");
			мз.Записать();
			
		КонецПопытки;
		КоличествоЗагружено = КоличествоЗагружено + 1;
	КонецЦикла;
	Чтение.Закрыть();
	Чтение = Неопределено;
	//ЗафиксироватьТранзакцию();
	КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом(СтрШаблон("Конец Кол-во: %1", КоличествоЗагружено), "Запись изменений", Нач);
	
	ПереместитьФайл(ПолноеИмя, СтрЗаменить(ПолноеИмя, "/unloaded/", "/uploaded/"));
	Если СтрЗаканчиваетсяНа(ПолноеИмя, ".zip") Тогда
		Попытка
			УдалитьФайлы(ВремКаталог);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерезаписатьЗагружаемыеОбъектыИзДругойБазы1С() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОчередьАсинхронныхСообщенийОбмена.Метод КАК Метод,
		|	ОчередьАсинхронныхСообщенийОбмена.ИдентификаторСообщения КАК ИдентификаторСообщения,
		|	ОчередьАсинхронныхСообщенийОбмена.Направление КАК Направление,
		|	ОчередьАсинхронныхСообщенийОбмена.Заголовки КАК Заголовки,
		|	ОчередьАсинхронныхСообщенийОбмена.Тело КАК Тело,
		|	ОчередьАсинхронныхСообщенийОбмена.Параметры КАК Параметры,
		|	ОчередьАсинхронныхСообщенийОбмена.id КАК id,
		|	ОчередьАсинхронныхСообщенийОбмена.ДатаСобытия КАК ДатаСобытия
		|ИЗ
		|	РегистрСведений.ОчередьАсинхронныхСообщенийОбмена КАК ОчередьАсинхронныхСообщенийОбмена
		|ГДЕ
		|	ОчередьАсинхронныхСообщенийОбмена.Метод = &Метод
		|	И ОчередьАсинхронныхСообщенийОбмена.Направление = ЗНАЧЕНИЕ(Перечисление.ТипНаправленияСообщенияОбменаСервиса.Входящий)";
	
	Запрос.УстановитьПараметр("Метод", ОбменСообщениямиССервисами.ПолучитьМетодОбменаСообщениямиПоКоду("ЗагрузкаДанныхИз1С", Истина, 30));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Сообщить("Количество в Выборке " + Выборка.Количество() + " " + ТекущаяДата());
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
		
			Если ПустаяСтрока(Выборка.Параметры) Тогда
				Параметры = Новый Структура;
			Иначе
				Параметры = ОбменСообщениямиССервисами.ПрочитатьJSONвДанные(Выборка.Параметры);
			КонецЕсли;
			
			ПопыткаПереотправки = Неопределено;
			Параметры.Свойство("ПопыткаПереотправки", ПопыткаПереотправки);
			Если ПопыткаПереотправки = Неопределено Тогда
				ПопыткаПереотправки = 1;
			Иначе
				ПопыткаПереотправки = ПопыткаПереотправки + 1;
			КонецЕсли;
			
			Если ПопыткаПереотправки > 3 Тогда
				Продолжить;
			КонецЕсли;
			
			Параметры.Вставить("ПопыткаПереотправки", ПопыткаПереотправки);
			МЗ = РегистрыСведений.ОчередьАсинхронныхСообщенийОбмена.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МЗ, Выборка);
			
			ОшибкаЧтения = Ложь;
			
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(Выборка.Тело);
			
			СчитанныйОбъект = ПрочитатьXML(ЧтениеXML);
			Если СчитанныйОбъект = Неопределено Тогда
				ОшибкаЧтения = Истина;
			Иначе
				Если ТипЗнч(СчитанныйОбъект) <> Тип("УдалениеОбъекта") Тогда
					СчитанныйОбъект.ДополнительныеСвойства.Вставить("ПропуститьЗаписьВерсииОбъекта", Истина);
				КонецЕсли;
				СчитанныйОбъект.ОбменДанными.Загрузка = Истина;
			
				Попытка
					СчитанныйОбъект.Записать();
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru='Не удалось записать %1, по причине %2'"),
						СчитанныйОбъект, ОписаниеОшибки()));
						
					ОшибкаЧтения = Истина;
				КонецПопытки;
			КонецЕсли;
			
			Если Не ОшибкаЧтения Тогда
				
				Попытка
					МЗ.Удалить();
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтрШаблон(НСтр("ru='Не удалось удалить запись АсинхронныхСообщенийОбмена по методу %1 ИдентификаторСообщения %2 по причине %3'"),
						Выборка.Метод, Выборка.ИдентификаторСообщения, ОписаниеОшибки()));
				КонецПопытки;
			Иначе
				
				МЗ.Параметры = ОбменСообщениямиССервисами.ПреобразоватьДанныеВ_JSON(Параметры, Истина);
				Попытка
					МЗ.Записать();
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтрШаблон(НСтр("ru='Не удалось перезаписать запись АсинхронныхСообщенийОбмена по методу %1 ИдентификаторСообщения %2 по причине %3'"),
						Выборка.Метод, Выборка.ИдентификаторСообщения, ОписаниеОшибки()));
				КонецПопытки;
				
			КонецЕсли;
			
		Исключение
			Сообщить(ОписаниеОшибки());		
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

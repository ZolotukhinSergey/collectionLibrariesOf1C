
Функция ПолучитьДополнительноеСвойствоПоИмени(Имя, НаборСвойств = Неопределено) Экспорт
	
	Возврат КодОбщегоНазначенияПовтИсп.ПолучитьДополнительноеСвойствоПоИмени(Имя, НаборСвойств);
		
КонецФункции

Функция ПолучитьЗначениеДополнительногоРеквизитаПоНаименованию(Наименование, Свойство) Экспорт
	
	Возврат КодОбщегоНазначенияПовтИсп.ПолучитьЗначениеДополнительногоРеквизитаПоНаименованию(Наименование, Свойство);
	
КонецФункции

Функция ПолучитьВыборкуХраненияФайлаВТомахДляОбъекта(ОбъектФайла) Экспорт
	
	Если ОбъектФайла = Неопределено Тогда
		Возврат СтандартнаяВыборкаХраненияНаТомах();
	КонецЕсли;
	
	ВладелецФайла = Неопределено;
	Если ТипЗнч(ОбъектФайла) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектФайла.Владелец, "ВладелецФайла");
	ИначеЕсли ТипЗнч(ОбъектФайла) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектФайла, "Владелец.ВладелецФайла");
	Иначе
		ВладелецФайла = ОбъектФайла.ВладелецФайла;
	КонецЕсли;
	
	СпрИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ВладелецФайла));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиХраненияФайловПоТомамПоОбъектам.ТомХранения КАК Ссылка,
		|	НастройкиХраненияФайловПоТомамПоОбъектам.Каталог КАК Каталог,
		|	НастройкиХраненияФайловПоТомамПоОбъектам.ТомХранения.ПолныйПутьLinux КАК ПолныйПутьLinux,
		|	НастройкиХраненияФайловПоТомамПоОбъектам.ТомХранения.ПолныйПутьWindows КАК ПолныйПутьWindows
		|ИЗ
		|	РегистрСведений.НастройкиХраненияФайловПоТомамПоОбъектам КАК НастройкиХраненияФайловПоТомамПоОбъектам
		|ГДЕ
		|	НастройкиХраненияФайловПоТомамПоОбъектам.ТипВладельцаФайла = &ТипВладельцаФайла";
	
	Запрос.УстановитьПараметр("ТипВладельцаФайла", СпрИдентификаторМетаданных);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СтандартнаяВыборкаХраненияНаТомах();
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

Функция СтандартнаяВыборкаХраненияНаТомах() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТомаХраненияФайлов.Ссылка КАК Ссылка,
		|	"""" КАК Каталог,
		|	ТомаХраненияФайлов.ПолныйПутьLinux КАК ПолныйПутьLinux,
		|	ТомаХраненияФайлов.ПолныйПутьWindows КАК ПолныйПутьWindows,
		|	НЕ НастройкиХраненияФайловПоТомамПоОбъектам.Каталог ЕСТЬ NULL КАК ЕстьНастройка
		|ИЗ
		|	Справочник.ТомаХраненияФайлов КАК ТомаХраненияФайлов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиХраненияФайловПоТомамПоОбъектам КАК НастройкиХраненияФайловПоТомамПоОбъектам
		|		ПО НастройкиХраненияФайловПоТомамПоОбъектам.ТомХранения = ТомаХраненияФайлов.Ссылка
		|ГДЕ
		|	ТомаХраненияФайлов.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЕстьНастройка,
		|	ТомаХраненияФайлов.ПорядокЗаполнения";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Нет ни одного тома для размещения файла.'");
	КонецЕсли;
	
	Возврат Выборка;
	
КонецФункции

Функция НайтиНаборДополнительныхРеквизитовИСведений(ИмяПредопределенногоНабора) Экспорт
	
	Возврат КодОбщегоНазначенияПовтИсп.НайтиНаборДополнительныхРеквизитовИСведений(ИмяПредопределенногоНабора);
	
КонецФункции

Функция ПроверитьВключенаЛиДополнительнаяНастройкаПрограммы(ДопНастройка = Неопределено) Экспорт
	
	Возврат КодОбщегоНазначенияПовтИсп.ПроверитьВключенаЛиДополнительнаяНастройкаПрограммы(ДопНастройка);
	
КонецФункции

// Глобальные клиентские настройки отчетов.
Функция ВыполнятьЗамерыОценкиПроизводительности() Экспорт
	Если БезопасныйРежим() <> Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		МодульОценкаПроизводительностиВызовСервераПовтИсп = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительностиВызовСервераПовтИсп");
		Если МодульОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Функция ПолучитьЗначениеДополнительногоСведенияПоОбъекту(Объект, Свойство, НаборСвойств = Неопределено) Экспорт
	
	Если ТипЗнч(Свойство) = Тип("Строка") Тогда
		Свойство = КодОбщегоНазначенияПовтИсп.ПолучитьДополнительноеСвойствоПоИмени(Свойство, НаборСвойств);
	ИначеЕсли ТипЗнч(Свойство) <> Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
		ВызватьИсключение СтрШаблон(НСтр(
			"ru='Не верный тип значения (%1) второго параметра функции ПолучитьЗначениеДополнительногоСведенияПоОбъекту'"),
			ТипЗнч(Свойство));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДополнительныеСведения.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект = &Объект
		|	И ДополнительныеСведения.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Свойство", Свойство);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначениеДополнительногоРеквизитаПоОбъекту(Объект, Свойство, НаборСвойств = Неопределено) Экспорт
	
	Если ТипЗнч(Свойство) = Тип("Строка") Тогда
		Свойство = КодОбщегоНазначенияПовтИсп.ПолучитьДополнительноеСвойствоПоИмени(Свойство, НаборСвойств);
	ИначеЕсли ТипЗнч(Свойство) <> Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
		ВызватьИсключение СтрШаблон(НСтр(
			"ru='Не верный тип значения (%1) второго параметра функции ПолучитьЗначениеДополнительногоСведенияПоОбъекту'"),
			ТипЗнч(Свойство));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрШаблон(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДопРеквизиты.Значение КАК Значение
		|ИЗ
		|	%1.ДополнительныеРеквизиты КАК ДопРеквизиты
		|ГДЕ
		|	ДопРеквизиты.Ссылка = &Объект
		|	И ДопРеквизиты.Свойство = &Свойство", Объект.Метаданные().ПолноеИмя());
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Свойство", Свойство);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьДополнительноеСведениеПоОбъекту(Объект, Знач Свойство, Значение) Экспорт
	
	Если ТипЗнч(Свойство) = Тип("Строка") Тогда
		Свойство = КодОбщегоНазначенияПовтИсп.ПолучитьДополнительноеСвойствоПоИмени(Свойство);
	ИначеЕсли ТипЗнч(Свойство) <> Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
		ВызватьИсключение СтрШаблон(НСтр(
			"ru='Не верный тип значения (%1) второго параметра функции ЗаписатьДополнительноеСведениеПоОбъекту'"),
			ТипЗнч(Свойство));
	КонецЕсли;
	
	МЗ = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	МЗ.Объект = Объект;
	МЗ.Свойство = Свойство;
	МЗ.Значение = Значение;
	МЗ.Записать(); 
	
КонецПроцедуры

Функция ПолучитьURN_ИзТомаИПутиКФайлу(Том, ПутьКФайлу, КодироватьВURL = Истина) Экспорт
	
	Если ПустаяСтрока(Том) Или ПустаяСтрока(ПутьКФайлу) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрШаблон("urn:%1%2:%3", ?(СтрНайти(Том, "x-wb-") = 0, "x-wb-", ""), Том,
		?(КодироватьВURL, КодироватьСтроку(ПутьКФайлу, СпособКодированияСтроки.КодировкаURL), ПутьКФайлу));
	
КонецФункции

Функция ПолучитьИзURN_ТомИПутьКФайлу(URN, РаскодироватьURL = Истина, ТомПолныйПуть = "") Экспорт
	
	СтруктураВозврата = Новый Структура("Том, ПутьКФайлу, ИмяФайла, Расширение, Версия, Каталог", "", "", "", "", 0, "");
	
	Если ТипЗнч(URN) <> Тип("Строка") Или ПустаяСтрока(URN) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	мURN = СтрРазделить(URN, ":");
	Если мURN.Количество() >= 3 Тогда
		
		ПутьКФайлу = ?(РаскодироватьURL, РаскодироватьСтроку(мURN[2], СпособКодированияСтроки.КодировкаURL), мURN[2]);
		
		Если ТомПолныйПуть <> "" Тогда
			Файлик = Новый Файл(ТомПолныйПуть + ПутьКФайлу);
			Если Не Файлик.Существует() Тогда
				Возврат СтруктураВозврата;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураВозврата.Том = мURN[1];
		СтруктураВозврата.ПутьКФайлу = ПутьКФайлу;
		СимволРазделителяПути = ?(СтрНайти(СтруктураВозврата.ПутьКФайлу, "\") = 0, "/", "\");
		мПутьКФайлу = СтрРазделить(СтруктураВозврата.ПутьКФайлу, СимволРазделителяПути);
		ПолноеИмяФайла = ?(мПутьКФайлу.ВГраница() < 0, "", мПутьКФайлу[мПутьКФайлу.ВГраница()]);
		мСоставИмени = СтрРазделить(ПолноеИмяФайла, ".");
		СтруктураВозврата.Расширение = ?(мСоставИмени.ВГраница() <= 0, "", мСоставИмени[мСоставИмени.ВГраница()]);
		СтруктураВозврата.ИмяФайла = Лев(ПолноеИмяФайла, СтрДлина(ПолноеИмяФайла) - СтрДлина(СтруктураВозврата.Расширение) - 1);
		Если мСоставИмени.Количество() >= 3 И СтрНайти(мСоставИмени[мСоставИмени.ВГраница() - 1], "v") <> 0 Тогда
			Попытка
				СтруктураВозврата.Версия = Число(СтрЗаменить(мСоставИмени[мСоставИмени.ВГраница() - 1], "v", ""));
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если мПутьКФайлу.Количество() > 1 Тогда
			мПутьКФайлу.Удалить(мПутьКФайлу.ВГраница());
			СтруктураВозврата.Каталог = СтрСоединить(мПутьКФайлу, СимволРазделителяПути) + СимволРазделителяПути;
		КонецЕсли;
	ИначеЕсли мURN.Количество() = 1 Тогда
		СтруктураВозврата.Том = мURN[0];
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция СоздатьПрикрепленныйФайлПоУжеЛежащемуФайлуВТоме(ВладелецФайла, Том, ТомПолныйПуть, ПутьКФайлу, Описание, Файлик = Неопределено) Экспорт
	
	НовоеФото = Справочники.КонтрагентыПрисоединенныеФайлы.СоздатьЭлемент();
	НовоеФото.ВладелецФайла = ВладелецФайла;
	НовоеФото.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	НовоеФото.ДатаСоздания = ТекущаяДатаСеанса();
	НовоеФото.Изменил = ПараметрыСеанса.ТекущийПользователь;
	НовоеФото.Описание = Описание;
	НовоеФото.ПутьКФайлу = ПутьКФайлу;
	
	Если Файлик = Неопределено Тогда
		Файлик = Новый Файл(ТомПолныйПуть + ПутьКФайлу);
	КонецЕсли;
	
	НовоеФото.Размер = Файлик.Размер();
	НовоеФото.Расширение = Файлик.Расширение;
	НовоеФото.Наименование = Файлик.ИмяБезРасширения;
	НовоеФото.СтатусИзвлеченияТекста = ПредопределенноеЗначение("Перечисление.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен");
	НовоеФото.ТипХраненияФайла = ПредопределенноеЗначение("Перечисление.ТипыХраненияФайлов.ВТомахНаДиске");
	НовоеФото.Том = Том;
	
	НовоеФото.Записать();
		
	Возврат НовоеФото.Ссылка;
	
КонецФункции

Функция ПолучитьТекстомСообщенияПользователю() Экспорт
	
	мСообщений = Новый Массив;
	СообщенияПользователю = ПолучитьСообщенияПользователю(Ложь);
	Для Каждого Сообщение Из СообщенияПользователю Цикл
		мСообщений.Добавить(Сообщение.Текст);
	КонецЦикла;
	
	Возврат СтрСоединить(мСообщений, Символы.ПС);
	
КонецФункции

Функция СтатусНаСайтеСоответствующийНашемуСтатусу(СтатусЗаявки = Неопределено, Заявка = Неопределено) Экспорт
	
	Если СтатусЗаявки = Неопределено Тогда
		СтатусЗаявки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заявка, "вбСтатусЗаявки");
	КонецЕсли;
	
	Если СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.ПустаяСсылка")
		Или СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст01_ЗаявкаЗагружена")
		Или СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст00_Ошибка")
		Или СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст020_1_ПолученыОтветыФМС")
		Или СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст022_1_БКИ_Эквифакс")
		Или СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст022_2_БКИ_ОКБ")
		Или СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст022_3_БКИ_БРС")
		Или СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст0250_АнализКИ")
		Или СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст04_ПринятоРешение")
		Или СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст025_ПолученыОтветыБКИ3") Тогда
		
		Возврат 2;
		
	ИначеЕсли СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст05_ДоговорНаПодписании") Тогда
		
		Возврат 3;
		
	ИначеЕсли СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст06_ДоговорПодписан")
		Или СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст07_ЗаявкаНаОплате")
		Или СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст00_ОшибкаОплаты") Тогда
		
		Возврат 5;
		
	ИначеЕсли СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст08_ЗаймВыдан")
		Или СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст081_ЗаймВыдан_ДопСоглашение")
		Или СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст10_ПросроченПлатеж")
		Или СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст110_СофтКоллекшн")
		Или СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст111_ХардКоллекшн")
		Или СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст112_СудебноеПроизводство")
		Или СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст115_Выбывшие")
		Или СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст116_ОтказОтВзаимодействия")
		Или СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст114_ЗаявлениеМВД") Тогда
		
		Возврат 6;
		
	ИначеЕсли СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст09_ЗаймПогашен")
		Или СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст112_3_БАНКРОТ")
		Или СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст118_Продажа") Тогда
		
		Возврат 7;
		
	ИначеЕсли СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст100_ВыдачаОтклонена") Тогда
		
		Возврат 100;
		
	ИначеЕсли СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст101_КлиентОтказался") Тогда
		
		Возврат 101;
		
	ИначеЕсли СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст102_НеПодписал") Тогда
		
		Возврат 102;
		
	ИначеЕсли СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст04_2_ОжидаетИдентификации")
		И ?(Заявка = Неопределено, Ложь, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заявка, "ОсновнаяСумма") > 15000) Тогда
		
		Возврат 12;
		
	ИначеЕсли СтатусЗаявки = ПредопределенноеЗначение("Перечисление.вбСтатусыЗаявок.Ст04_2_ОжидаетИдентификации") Тогда
		
		Возврат 10;
		
	Иначе
		
		Возврат 2;
		
	КонецЕсли;
	
КонецФункции

Функция ИНН_Корректный(Знач ИНН) Экспорт
	
	Если ТипЗнч(ИНН) <> Тип("Строка") Или ПустаяСтрока(ИНН) Или СтрДлина(ИНН) <> 12 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Сумма1 = 0;
		СтрКоэф = "7, 2, 4, 10, 3, 5, 9, 4, 6, 8";
		Коэф = СтрРазделить(СтрКоэф, ", ", Ложь);

		Для Инд = 0 По Коэф.ВГраница() Цикл
			Сумма1 = Сумма1 + Коэф[Инд] * Число(Сред(ИНН, Инд + 1, 1));
		КонецЦикла;

		Сумма2 = 0;
		СтрКоэф = "3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8";
		Коэф = СтрРазделить(СтрКоэф, ", ", Ложь);

		Для Инд = 0 По Коэф.ВГраница() Цикл
			Сумма2 = Сумма2 + Коэф[Инд] * Число(Сред(ИНН, Инд + 1, 1));
		КонецЦикла;

		Остаток1 = Сумма1 % 11 % 10;
		Остаток2 = Сумма2 % 11 % 10;

		КС1 = Число(Сред(ИНН, 11, 1));
		КС2 = Число(Прав(ИНН, 1));
		
		Возврат Остаток1 = КС1 И Остаток2 = КС2;
	Исключение
		РаботаС_Sentry.ОтправитьЛогПоИсключению(ИнформацияОбОшибке(),,, "ИНН_Корректный",, СтрШаблон("ИНН: ", ИНН));
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция СНИЛС_Корректный(Знач СНИЛС) Экспорт
	
	Если ТипЗнч(СНИЛС) <> Тип("Строка") Или ПустаяСтрока(СНИЛС) Или СтрДлина(СНИЛС) <> 11 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Сумма = 0;
		Для Инд = 1 По 9 Цикл
			Сумма = Сумма + (10 - Инд) * Число(Сред(СНИЛС, Инд, 1));
		КонецЦикла;

		КС = Число(Прав(СНИЛС, 2));

		Если Сумма > 101 Тогда
			Сумма = Сумма - 101;
		ИначеЕсли Сумма = 100 Или Сумма = 101 Тогда
			Сумма = 0;
		КонецЕсли;
		
		Возврат Сумма = КС;
	Исключение
		РаботаС_Sentry.ОтправитьЛогПоИсключению(ИнформацияОбОшибке(),,, "СНИЛС_Корректный",, СтрШаблон("СНИЛС: ", СНИЛС));
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ЗаписатьРезультатыВнешнегоИсточникаВФайлыТома(ВидЗапроса, ТелоЗапроса, ТекстОтвета, ИдЗаявки, ИдКлиента,
	Успех = Истина, РасширениеФайла = "txt", ДатаДляЗаписи = Неопределено, Сжимать = Истина) Экспорт
	
	СтруктураРезультата = Новый Структура("Успех, Запрос, Ответ", Истина, ТелоЗапроса, ТекстОтвета);
	
	Настройка = КодОбщегоНазначения.ПолучитьДополнительнуюНастройкуПрограммы(,, "Настройки сохранения внешних источников");
	Если КодОбщегоНазначения.ПолучитьЭлементСтруктуры(Настройка, "Включена") <> Истина Тогда
		Возврат СтруктураРезультата;
	КонецЕсли;
	
	Том = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(Настройка, "Том");
	Если Не ЗначениеЗаполнено(Том) Тогда
	    Возврат СтруктураРезультата;
	КонецЕсли;
	
	ВидЗапросаСтрокой = КодОбщегоНазначенияПовтИсп.ВернутьИмяЗначенияПеречисления(ВидЗапроса);
	ВидЗапросаСтрокой = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(НРег(ВидЗапросаСтрокой));
	
	ВидыЗапросов = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(Настройка, "ВидыЗапросов");
	Если ТипЗнч(ВидыЗапросов) = Тип("Строка") Тогда
		Если СтрСравнить(ВидыЗапросов, ВидЗапросаСтрокой) <> 0 Тогда
			Возврат СтруктураРезультата;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВидыЗапросов) = Тип("Массив") Тогда
		Если ВидыЗапросов.Найти(ВидЗапросаСтрокой) = Неопределено Тогда
			Возврат СтруктураРезультата;
		КонецЕсли;
	Иначе
		Возврат СтруктураРезультата;
	КонецЕсли; 
	
	РазделительПути = ПолучитьРазделительПути();
	ЭтоЛинукс = РазделительПути = "/";
	РеквизитыТома = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Том, "Наименование, ПолныйПутьLinux, ПолныйПутьWindows");
	Корень = ?(ЭтоЛинукс, РеквизитыТома.ПолныйПутьLinux, РеквизитыТома.ПолныйПутьWindows);
	
	Если ДатаДляЗаписи = Неопределено Тогда
		ДатаДляЗаписи = ТекущаяДатаСеанса();
	КонецЕсли;
	
	//ПодКаталог = СтрШаблон("%1%2%3%2%4%2", ВидЗапросаСтрокой, РазделительПути,
	//	Формат(ДатаДляЗаписи, "ДФ=yyyy-MM-dd"), Формат(ИдЗаявки, "ЧДЦ=0; ЧН=0; ЧГ=0"));
		
	ИдКлиентаСтрокой = Формат(ИдКлиента, "ЧДЦ=0; ЧН=0; ЧГ=0");
	ПодКаталог = СтрШаблон("%1%2%3%2%4%2%5%2", Лев(ИдКлиентаСтрокой, 3), РазделительПути, ИдКлиентаСтрокой,
		ВидЗапросаСтрокой, Формат(ИдЗаявки, "ЧДЦ=0; ЧН=0; ЧГ=0"));	
	
	КаталогСохранения = СтрШаблон("%1%2", Корень, ПодКаталог);
	
	Попытка
		ФайлКаталог = Новый Файл(КаталогСохранения);
		Если Не ФайлКаталог.Существует() Тогда
			СоздатьКаталог(КаталогСохранения);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	ТолькоИмяФайлаЗапроса = СтрШаблон("%1_request", Формат(ДатаДляЗаписи, "ДФ=yyyy-MM-dd-HH-mm-ss"));
	ОкончаниеФайлаЗапроса = ВыполнитьЗаписьОдногоФайлаВнешнегоЗапроса(ТелоЗапроса, Корень, ПодКаталог,
		ТолькоИмяФайлаЗапроса, РасширениеФайла, РеквизитыТома.Наименование, Сжимать);
	ТолькоИмяФайлаОтвета = СтрШаблон("%1_%2_response", Формат(ДатаДляЗаписи, "ДФ=yyyy-MM-dd-HH-mm-ss"),
		Формат(Успех, "БЛ=failure; БИ=success"));
	ОкончаниеФайлаОтвета = ВыполнитьЗаписьОдногоФайлаВнешнегоЗапроса(ТекстОтвета, Корень, ПодКаталог,
		ТолькоИмяФайлаОтвета, РасширениеФайла, РеквизитыТома.Наименование, Сжимать);
	
	СтруктураРезультата.Вставить("Запрос", ОкончаниеФайлаЗапроса);
	СтруктураРезультата.Вставить("Ответ", ОкончаниеФайлаОтвета);
	Возврат СтруктураРезультата;
	
КонецФункции

Функция ВыполнитьЗаписьОдногоФайлаВнешнегоЗапроса(ТекстТела, Корень, ПодКаталог, ТолькоИмяФайла,
	РасширениеФайла = "txt", НазваниеТома, Сжимать = Истина, ВыводитьСообщенияОЗаписи = Истина) Экспорт
	
	Если ПустаяСтрока(ТекстТела) Или СтрНачинаетсяС(ТекстТела, "urn:") Тогда
		Возврат ТекстТела;
	КонецЕсли;
	
	Попытка
		ВремКаталог = "";
		ИмяФайлаРезультата = "";
		РазделительПути = ПолучитьРазделительПути();
		Если Сжимать = Истина Тогда
			ВремКаталог = СтрШаблон("%1%2%3", КаталогВременныхФайлов(), Строка(Новый УникальныйИдентификатор), РазделительПути);
			СоздатьКаталог(ВремКаталог);
			ИмяТекстовогоФайла = СтрШаблон("%1%2.%3", ВремКаталог, ТолькоИмяФайла, РасширениеФайла);
		Иначе
			ИмяФайлаРезультата = СтрШаблон("%1%2.%3", ПодКаталог, ТолькоИмяФайла, РасширениеФайла);
			ИмяТекстовогоФайла = СтрШаблон("%1%2", Корень, ИмяФайлаРезультата);
		КонецЕсли;
		
		Нач = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ТекстФайл = Новый ТекстовыйДокумент;
		ТекстФайл.УстановитьТекст(ТекстТела);
		ТекстФайл.Записать(ИмяТекстовогоФайла);
		ТекстФайл = Неопределено;
		Если ВыводитьСообщенияОЗаписи = Истина Тогда
			КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом(СтрШаблон("Конец %1", ИмяТекстовогоФайла), "Запись текст файла", Нач);
		КонецЕсли;
		
		Если Сжимать = Истина Тогда
			Нач = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ИмяФайлаРезультата = СтрШаблон("%1%2.zip", ПодКаталог, ТолькоИмяФайла);
			ИмяФайлаЗип = СтрШаблон("%1%2", Корень, ИмяФайлаРезультата);
			ЗаписьЗип = Новый ЗаписьZipФайла(ИмяФайлаЗип,,, МетодСжатияZIP.BZIP2, УровеньСжатияZIP.Максимальный);
			ЗаписьЗип.Добавить(ИмяТекстовогоФайла);
			ЗаписьЗип.Записать();
			Если ВыводитьСообщенияОЗаписи = Истина Тогда
				КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом(СтрШаблон("Конец %1", ИмяФайлаЗип), "Запись ЗИП", Нач);
			КонецЕсли;
			
			Попытка
				УдалитьФайлы(ВремКаталог);
			Исключение
			КонецПопытки;
		КонецЕсли;
	Исключение
		РаботаС_Sentry.ОтправитьЛогПоИсключению(ИнформацияОбОшибке(),,, "ВыполнитьЗаписьОдногоФайлаВнешнегоЗапроса");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru='При записи файла произошла ошибка %1'"), ОписаниеОшибки()));
		Возврат ТекстТела;
	КонецПопытки;
	
	Возврат ПолучитьURN_ИзТомаИПутиКФайлу(НазваниеТома, ИмяФайлаРезультата, Ложь);
	
КонецФункции

Функция ПрочитатьФайлВнешнегоИсточникаИзТома(ТекстТела, НеВыводитьСообщенияПользователю = Ложь,
	ВызыватьИсключениеЕслиФайлНеНайден = Истина) Экспорт
	
	ЭтоАрхив = Ложь;
	РазделительПути = ПолучитьРазделительПути();
	Если СтрНачинаетсяС(ТекстТела, "urn:") Тогда
		СтруктураURN = ПолучитьИзURN_ТомИПутьКФайлу(ТекстТела, Ложь);
		Корень = КодОбщегоНазначенияПовтИсп.ПолучитьПоНазваниюТомаПолныйПутьКаталога(СтруктураURN.Том);
		ПутьКФайлу = Корень + СтруктураURN.ПутьКФайлу;
		Если СтрСравнить(СтруктураURN.Расширение, "zip") = 0 Тогда
			ЭтоАрхив = Истина;
		КонецЕсли;
	Иначе
		Возврат ТекстТела;
	КонецЕсли;
	
	Попытка
		ФайлЧитаемый = Новый Файл(ПутьКФайлу);
		Если Не ФайлЧитаемый.Существует() Тогда
			СтрокаПричины = СтрШаблон("Читаемый файл не существует %1", ПутьКФайлу);
			РаботаС_Sentry.ОтправитьЛогПоИсключению(ИнформацияОбОшибке(),,, "ПрочитатьФайлВнешнегоИсточникаИзТома",,
				СтрокаПричины);
			//Возврат ТекстТела;
			Если ВызыватьИсключениеЕслиФайлНеНайден = Истина Тогда
				ВызватьИсключение СтрокаПричины;
			Иначе
				Возврат ТекстТела;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоАрхив Тогда
			Нач = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ЧтениеЗип = Новый ЧтениеZipФайла(ПутьКФайлу);
			ВремКаталог = СтрШаблон("%1%2/", КаталогВременныхФайлов(), Строка(Новый УникальныйИдентификатор));
			Если ЧтениеЗип.Элементы.Количество() = 0 Тогда
				СтрокаПричины = СтрШаблон("Архив ЗИП оказался пустой %1", Корень + ТекстТела);
				РаботаС_Sentry.ОтправитьЛогПоИсключению(ИнформацияОбОшибке(),,, "ПрочитатьФайлВнешнегоИсточникаИзТома",,
					"Архив ЗИП оказался пустой");
				//Возврат ТекстТела;
				Если ВызыватьИсключениеЕслиФайлНеНайден = Истина Тогда
					ВызватьИсключение СтрокаПричины;
				Иначе
					Возврат ТекстТела;
				КонецЕсли;
			КонецЕсли;
			ЭлементЗип = ЧтениеЗип.Элементы[0];
			ЧтениеЗип.Извлечь(ЭлементЗип, ВремКаталог);
			ИмяТекстФайла = СтрШаблон("%1%2", ВремКаталог, ЭлементЗип.Имя);
			Если НеВыводитьСообщенияПользователю = Ложь Тогда
				КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом(СтрШаблон("Конец %1", ПутьКФайлу), "Чтение ЗИП", Нач);
			КонецЕсли;
			ЧтениеЗип = Неопределено;
		Иначе
			ИмяТекстФайла = ПутьКФайлу;
		КонецЕсли;
		
		Нач = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ТекстДок = Новый ТекстовыйДокумент;
		ТекстДок.Прочитать(ИмяТекстФайла);
		ПрочитанныйТекст = ТекстДок.ПолучитьТекст();
		ТекстДок = Неопределено;
		Если НеВыводитьСообщенияПользователю = Ложь Тогда
			КодОбщегоНазначения.СообщитьПользователюСВременемИРазделом(СтрШаблон("Конец %1", ИмяТекстФайла), "Чтение текста", Нач);
		КонецЕсли;
		
		Если ЭтоАрхив Тогда
			Попытка
				УдалитьФайлы(ВремКаталог);
			Исключение
			КонецПопытки;
		КонецЕсли;
		Возврат ПрочитанныйТекст;
	Исключение
		СтрокаПричины = СтрШаблон(НСтр("ru='При чтении файла произошла ошибка %1'"), ОписаниеОшибки());
		РаботаС_Sentry.ОтправитьЛогПоИсключению(ИнформацияОбОшибке(),,, "ПрочитатьФайлВнешнегоИсточникаИзТома",, СтрокаПричины);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаПричины);
		//Возврат ТекстТела;
		Если ВызыватьИсключениеЕслиФайлНеНайден = Истина Тогда
			ВызватьИсключение СтрокаПричины;
		Иначе
			Возврат ТекстТела;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьПоляДляСтруктурыПоРезультатуЗапроса(РезультатЗапроса) Экспорт
	
	мИменЗапроса = Новый Массив;
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		мИменЗапроса.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Возврат СтрСоединить(мИменЗапроса, ", ");
	
КонецФункции

Функция ПолучитьВремяВМиллисекундах(ИсходнаяДата = Неопределено,
	ОтклонениеВСекундах = 0, УчитыватьЧасовойПояс = Истина) Экспорт
	
	Если УчитыватьЧасовойПояс = Истина Тогда
		ТекущееСмещениеСек = СмещениеСтандартногоВремени();
	Иначе
		ТекущееСмещениеСек = 0;
	КонецЕсли;
	
	Если ИсходнаяДата = Неопределено Тогда
		ИсходнаяДата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат (ИсходнаяДата - ОтклонениеВСекундах - Дата(1,1,1) - ТекущееСмещениеСек) * 1000;
	
КонецФункции


Процедура ВыполнитьЗаписьОбъектаВНесколькихПопытках(СсылкаНаОбъект, СтруктураЗаполненияРеквизитов = Неопределено,
	РежимЗаписи = Неопределено, СтруктураДополнительныхДействий = Неопределено,
	КоличествоПопыток = 10, ВызватьИсключениеПриНеудачи = Ложь, ДополнительныеСвойства = Неопределено) Экспорт
	
	ЭтоОбъект = Ложь;
	ТипСсылкиНаОбъект = ТипЗнч(СсылкаНаОбъект);
	Если Не ОбщегоНазначения.ЭтоСсылка(ТипСсылкиНаОбъект) Тогда
		Попытка
			СсылкаНаОбъект.ЭтоНовый();
			ЭтоОбъект = Истина;
		Исключение
		КонецПопытки;
		Если Не ЭтоОбъект Тогда
			ВызватьИсключение СтрШаблон(НСтр(
				"ru='В процедуру ВыполнитьЗаписьОбъектаВНесколькихПопытках передали неверный параметр %1'"), ТипСсылкиНаОбъект);
		КонецЕсли;
	КонецЕсли;
	
	МетаданныеСсылки = СсылкаНаОбъект.Метаданные();
	УдалосьЗаписать = Ложь;
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Если ЭтоОбъект Тогда
				ОбъектИзСсылки = СсылкаНаОбъект;
			Иначе
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(МетаданныеСсылки.ПолноеИмя());
				ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаОбъект);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				ОбъектИзСсылки = СсылкаНаОбъект.ПолучитьОбъект();
			КонецЕсли;
			
			Если Не СтруктураЗаполненияРеквизитов = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ОбъектИзСсылки, СтруктураЗаполненияРеквизитов);
			КонецЕсли;
			
			Если ТипЗнч(ДополнительныеСвойства) = Тип("Структура") Тогда
				Для Каждого КлючИЗначение Из ДополнительныеСвойства Цикл
					ОбъектИзСсылки.ДополнительныеСвойства.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				КонецЦикла;
			КонецЕсли;
			
			Если СтруктураДополнительныхДействий <> Неопределено Тогда
				Для Каждого ЭлементДополнительногоДействия Из СтруктураДополнительныхДействий Цикл
					СтрокаДляВыполнения = СтрШаблон("ОбъектИзСсылки.%1(", ЭлементДополнительногоДействия.Ключ);
					Если ТипЗнч(ЭлементДополнительногоДействия.Значение) = Тип("Массив") Тогда
						Для Сч = 0 По ЭлементДополнительногоДействия.Значение.ВГраница() Цикл
							СтрокаДляВыполнения = СтрШаблон("%1%2%3", СтрокаДляВыполнения, ?(Сч = 0, "", ", "),
								?(ЭлементДополнительногоДействия.Значение[Сч] = Null, "",
								СтрШаблон("ЭлементДополнительногоДействия.Значение[%1]", Сч)));
						КонецЦикла;
					ИначеЕсли ЭлементДополнительногоДействия.Значение <> Неопределено Тогда
						СтрокаДляВыполнения = СтрШаблон("%1%2", СтрокаДляВыполнения, "ЭлементДополнительногоДействия.Значение");
					КонецЕсли;
					СтрокаДляВыполнения = СтрокаДляВыполнения + ")";
					Выполнить(СтрокаДляВыполнения);
				КонецЦикла;
			КонецЕсли;
			
			Если РежимЗаписи = Неопределено Тогда
				ОбъектИзСсылки.Записать();
			Иначе
				ОбъектИзСсылки.Записать(РежимЗаписи);
			КонецЕсли;
			УдалосьЗаписать = Истина;
			ЗафиксироватьТранзакцию();
			Прервать;
		Исключение
			ОтменитьТранзакцию();
			ОписаниеОшибкиЗаписи = ОписаниеОшибки();
			Если СчетчикПопыток > 1 Тогда // если две попытки не успешны, то скорее всего конкурирующие данные пишутся
				Попытка
					Сек = ГСЧ.СлучайноеЧисло(0, 10); // поэтому лучше попробовать их разнести по разному времени
					ЗапуститьПриложение("ping -c " + Формат(1 + Сек, "ЧДЦ=0; ЧГ=") + " 127.0.0.1", , Истина);
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
	Если Не УдалосьЗаписать Тогда
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.вбНачислениеПроцентов") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru='Не удалось записать %1, договор %2 по причине %3'"),
				СсылкаНаОбъект, Строка(СсылкаНаОбъект.ДоговорКонтрагента), ОписаниеОшибкиЗаписи), СсылкаНаОбъект);
		Иначе	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru='Не удалось записать %1 по причине %2'"),
				СсылкаНаОбъект, ОписаниеОшибкиЗаписи), СсылкаНаОбъект);
		КонецЕсли; 	
		Если ВызватьИсключениеПриНеудачи Тогда
			ВызватьИсключение ОписаниеОшибкиЗаписи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает параметры из справочника дополнительные настройки программы
//
// Параметры:
//  ИмяПредопределенного  - Строка - Выполнить поиск по имени предопределенного элемента
//  Код  - Строка - Выполнить поиск по коду элемента
//  Наименование  - Строка - Выполнить поиск по наименованию элемента
//
// Возвращаемое значение:
//   Структура   - Структура состоящая из Ссылки на настройку, флага Включена и всех параметров указанных в ТЧ.
//
Функция ПолучитьДополнительнуюНастройкуПрограммы(ИмяПредопределенного = "", Код = "", Наименование = "") Экспорт
	
	Возврат ОбщегоНазначенияПовтИсп.ПолучитьДополнительнуюНастройкуПрограммы(ИмяПредопределенного, Код, Наименование);
	
КонецФункции


//	Описание: Читает XML файл и возвращает значение атрибутов узла.
// 	Возвращает: Структура, где ключи - это аттрибуты узла.
Функция ПрочитатьФайлXMLВТаблицуЗначений(ТекстХМЛ, Узлы = "") Экспорт

	// 01. Инициализация данных для значений файла.
	ХМЛ_ТаблицаДанных	=	Новый ТаблицаЗначений;
	ХМЛ_ТаблицаДанных.Колонки.Добавить("Уровень",				Новый ОписаниеТипов("Число"));
	ХМЛ_ТаблицаДанных.Колонки.Добавить("Путь",					Новый ОписаниеТипов("Строка"));
	ХМЛ_ТаблицаДанных.Колонки.Добавить("Узел",					Новый ОписаниеТипов("Строка"));
	ХМЛ_ТаблицаДанных.Колонки.Добавить("Значение",				Новый ОписаниеТипов("Строка"));
	ХМЛ_ТаблицаДанных.Колонки.Добавить("КоличествоАтрибутов",	Новый ОписаниеТипов("Число"));
	ХМЛ_ТаблицаДанных.Колонки.Добавить("Атрибуты");

	Если ПустаяСтрока(ТекстХМЛ) Тогда

		Возврат ХМЛ_ТаблицаДанных;

	КонецЕсли;


	// 02. Инициализация чтения файла.
	Попытка

		ЧтениеФайла		=	Новый ЧтениеXML;
		ЧтениеФайла.УстановитьСтроку(ТекстХМЛ);

	Исключение

		стрОшибка		=	КраткоеПредставлениеОшибки( ИнформацияОбОшибке() );
		Сообщить(стрОшибка);

		Возврат ХМЛ_ТаблицаДанных;

	КонецПопытки;


	// 03. Чтение файла.
	ТекущийУзелСтрока	=	Неопределено;
	МассивУзлов			=	Новый Массив;
	ОграничениеУзлов	=	?(ПустаяСтрока(Узлы), Новый Массив, СтрРазделить(Узлы, ","));
	стрТекущийПуть		=	"";

	Попытка

		ФайлСодержитДанные	=	ЧтениеФайла.Прочитать();

	Исключение

		стрОшибка	=	КраткоеПредставлениеОшибки( ИнформацияОбОшибке() );

		Сообщить(стрОшибка);

		Возврат ХМЛ_ТаблицаДанных;

	КонецПопытки;


	Пока ФайлСодержитДанные Цикл

		// 01. Инициализация нового узла.
		Если ЧтениеФайла.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда

			МассивУзлов.Добавить(ЧтениеФайла.Имя);
			стрТекущийПуть	=	нрег( стрСоединить(МассивУзлов, ".") );

			// Проверка, что установлено ограничение на чтение узлов
			ПропуститьУзел	=	ОграничениеУзлов.Количество() > 0 И ОграничениеУзлов.Найти(стрТекущийПуть) = Неопределено;

			Если ПропуститьУзел Тогда

				ТекущийУзелСтрока		=	Неопределено;

			Иначе

				ТекущийУзелСтрока			=	ХМЛ_ТаблицаДанных.Добавить();
				ТекущийУзелСтрока.Уровень	=	МассивУзлов.Количество();
				ТекущийУзелСтрока.Путь		=	стрТекущийПуть;
				ТекущийУзелСтрока.Узел		=	ЧтениеФайла.Имя;
				ТекущийУзелСтрока.Атрибуты	=	Новый Соответствие;
				ТекущийУзелСтрока.КоличествоАтрибутов	=	ЧтениеФайла.КоличествоАтрибутов();

				Для й=1 По ТекущийУзелСтрока.КоличествоАтрибутов Цикл

					ТекущийУзелСтрока.Атрибуты.Вставить(ЧтениеФайла.ИмяАтрибута(й-1), ЧтениеФайла.ПолучитьАтрибут(й-1));

				КонецЦикла;

			КонецЕсли;

		КонецЕсли;


		// 02. Чтение значения узла (текст).
		Если ЧтениеФайла.ТипУзла = ТипУзлаXML.Текст Тогда

			Если ТекущийУзелСтрока <> Неопределено Тогда

				ТекущийУзелСтрока.Значение	=	ЧтениеФайла.Значение;

			КонецЕсли;

		КонецЕсли;


		// 03. Закрытие узла.
		Если ЧтениеФайла.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда

			МассивУзлов.Удалить(МассивУзлов.ВГраница());
			стрТекущийПуть	=	нрег( стрСоединить(МассивУзлов, ".") );

		КонецЕсли;


		// 04. Продолжаем чтение файла.
		ФайлСодержитДанные	=	ЧтениеФайла.Прочитать();

	КонецЦикла;


	Возврат ХМЛ_ТаблицаДанных;

КонецФункции // ПрочитатьФайлXMLВТаблицуЗначений()

Функция ПроверитьЕстьЛиВложенностьСтруктуры(ПроверяемаяСтруктура, Вложенность = "") Экспорт
	
	ЭтоСтруктура = ТипЗнч(ПроверяемаяСтруктура) = Тип("Структура") Или ТипЗнч(ПроверяемаяСтруктура) = Тип("ФиксированнаяСтруктура");
	ЭтоСоответствие = ТипЗнч(ПроверяемаяСтруктура) = Тип("Соответствие") Или ТипЗнч(ПроверяемаяСтруктура) = Тип("ФиксированноеСоответствие");
	
	Если (Не ЭтоСтруктура И НЕ ЭтоСоответствие)
		Или ТипЗнч(Вложенность) <> Тип("Строка")
		Или ПустаяСтрока(Вложенность) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекущийУзелСтруктуры = ПроверяемаяСтруктура;
	мПути = СтрРазделить(Вложенность, ".");
	Для Каждого ЭлементПути Из мПути Цикл
		Если ЭтоСтруктура И Не ТекущийУзелСтруктуры.Свойство(ЭлементПути, ТекущийУзелСтруктуры) Тогда
			Возврат Ложь;
		ИначеЕсли ЭтоСоответствие Тогда
			ТекущийУзелСтруктуры = ТекущийУзелСтруктуры[ЭлементПути];
			Если ТекущийУзелСтруктуры = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьЭлементСтруктуры(Структура, Вложенность = "", ТипЗначения = Неопределено) Экспорт
	
	ЭтоСтруктура = ТипЗнч(Структура) = Тип("Структура") Или ТипЗнч(Структура) = Тип("ФиксированнаяСтруктура");
	ЭтоСоответствие = ТипЗнч(Структура) = Тип("Соответствие") Или ТипЗнч(Структура) = Тип("ФиксированноеСоответствие");
	
	Если (Не ЭтоСтруктура И НЕ ЭтоСоответствие)
		Или ТипЗнч(Вложенность) <> Тип("Строка")
		Или ПустаяСтрока(Вложенность) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущийУзелСтруктуры = Структура;
	мПути = СтрРазделить(Вложенность, ".");
	Для Каждого ЭлементПути Из мПути Цикл
		Если ЭтоСтруктура И Не ТекущийУзелСтруктуры.Свойство(ЭлементПути, ТекущийУзелСтруктуры) Тогда
			Возврат Неопределено;
		ИначеЕсли ЭтоСоответствие Тогда
			ТекущийУзелСтруктуры = ТекущийУзелСтруктуры[ЭлементПути];
			Если ТекущийУзелСтруктуры = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗначения = Тип("Дата") Тогда
		ТекущийУзелСтруктуры = ПреобразоватьСтрокуКДате(ТекущийУзелСтруктуры);
	ИначеЕсли ТипЗначения <> Неопределено Тогда
		МассивТипов = Новый Массив(1);
		МассивТипов[0] = ТипЗначения;
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
		ТекущийУзелСтруктуры = ОписаниеТипа.ПривестиЗначение(ТекущийУзелСтруктуры);
	КонецЕсли;
	
	Возврат ТекущийУзелСтруктуры;
	
КонецФункции

Функция ПолучитьВремяВыполнения(Начало, Конец = Неопределено) Экспорт
	
	Если Конец = Неопределено Тогда
		Конец = ?(ТипЗнч(Начало) = Тип("Число"), ТекущаяУниверсальнаяДатаВМиллисекундах(), ТекущаяДатаСеанса());
	КонецЕсли;
	
	Разница = Конец - Начало;
	Если Разница = 0 Тогда
		Возврат "0 с.";
	КонецЕсли;
	
	Мсек = 0;
	Если ТипЗнч(Начало) = Тип("Число") Тогда
		Мсек = Разница % 1000;
		Разница = Цел((Разница - Мсек) / 1000);
	КонецЕсли;

	Сек = Разница % 60;
	Разница = Цел((Разница - Сек) / 60);
	
	Мин = Разница % 60;
	Разница = Цел((Разница - Мин) / 60);
	
	Час = Разница % 24;
	Разница = Цел((Разница - Час) / 24);
	
	День = Разница;
	
	СтроваВывода = ?(День = 0, "", СтрШаблон("%1 д. ", День))
		+ ?(Час = 0, "", СтрШаблон("%1 ч. ", Час))
		+ ?(Мин = 0, "", СтрШаблон("%1 м. ", Мин))
		+ ?(Сек = 0, "", СтрШаблон("%1 с. ", Сек))
		+ ?(Мсек = 0, "", СтрШаблон("%1 мс. ", Мсек));
		
	Возврат СтроваВывода;
	
КонецФункции

Процедура СообщитьПользователюСВременемИРазделом(Текст, Раздел = "", НачалоЗамера = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон("%1 %2%3%4",
		Формат(ТекущаяДатаСеанса(), "ДФ='dd.MM.yy HH:mm:ss'"), ?(ПустаяСтрока(Раздел), "", СтрШаблон("%1. ", Раздел)), Текст,
		?(НачалоЗамера = Неопределено, "", СтрШаблон(НСтр("ru=' время выполнения: %1'"),
		ПолучитьВремяВыполнения(НачалоЗамера)))));
	
КонецПроцедуры

Функция ПреобразоватьСтрокуКДате(Знач СтрокаДаты) Экспорт
	
	Если ТипЗнч(СтрокаДаты) = Тип("Дата") Тогда
		Возврат СтрокаДаты;
	ИначеЕсли ТипЗнч(СтрокаДаты) <> Тип("Строка") Или ПустаяСтрока(СтрокаДаты) Тогда
		Возврат Дата(1,1,1);
	КонецЕсли;
	
	СтрокаДаты = ВРег(СтрокаДаты);
	НеобходимоПриводитьКМестномуВремени = Ложь;
	СимволРазделенияДаты = СтрНайти(СтрокаДаты, "T", НаправлениеПоиска.СКонца);
	Если СимволРазделенияДаты = 0 Тогда
		СимволРазделенияДаты = СтрНайти(СтрокаДаты, " ", НаправлениеПоиска.СКонца);
	КонецЕсли;
	
	СмещениеЧасы = 0;
	СмещениеМинуты = 0;
	ВремяМеньшеUTC = Ложь;
	
	Если СтрНайти(СтрокаДаты, "Z") > 0 Тогда
		НеобходимоПриводитьКМестномуВремени = Истина;
		СтрокаДаты = СтрЗаменить(СтрокаДаты, "Z", ".");
	ИначеЕсли СимволРазделенияДаты > 0 Тогда
		СимволЧП = СтрНайти(СтрокаДаты, "-",, СимволРазделенияДаты);
		Если СимволЧП = 0 Или СимволЧП <= СимволРазделенияДаты Тогда
			СимволЧП = СтрНайти(СтрокаДаты, "+",, СимволРазделенияДаты);
		Иначе
			ВремяМеньшеUTC = Истина;
		КонецЕсли;
		Если СимволЧП <> 0 И СимволЧП > СимволРазделенияДаты Тогда
			НеобходимоПриводитьКМестномуВремени = Истина;
			ЧастьЧП = Сред(СтрокаДаты, СимволЧП + 1);
			мЧастейДаты = СтрРазделить(ЧастьЧП, ":");
			Попытка
				СмещениеЧасы = ?(мЧастейДаты.Количество() > 0, Число(мЧастейДаты[0]), 0);
				СмещениеМинуты = ?(мЧастейДаты.Количество() > 1, Число(мЧастейДаты[1]), 0);
			Исключение
			КонецПопытки;
			СтрокаДаты = Лев(СтрокаДаты, СимволЧП - 1);
		КонецЕсли;
	КонецЕсли;
	
	// Приведем к одному разделителю
	СтрокаДаты = СтрЗаменить(СтрокаДаты, "-", ".");
	СтрокаДаты = СтрЗаменить(СтрокаДаты, "+", ".");
	СтрокаДаты = СтрЗаменить(СтрокаДаты, "/", ".");
	СтрокаДаты = СтрЗаменить(СтрокаДаты, "\", ".");
	СтрокаДаты = СтрЗаменить(СтрокаДаты, "T", ".");
	СтрокаДаты = СтрЗаменить(СтрокаДаты, "Т", ".");
	СтрокаДаты = СтрЗаменить(СтрокаДаты, ":", ".");
	СтрокаДаты = СтрЗаменить(СтрокаДаты, ";", ".");
	СтрокаДаты = СтрЗаменить(СтрокаДаты, ",", ".");
	СтрокаДаты = СтрЗаменить(СтрокаДаты, " ", ".");
	
	ПреобразованнаяДата = Дата(1,1,1);
	Год = 1;
	Месяц = 1;
	День = 1;
	Час = 0;
	Минута = 0;
	Секунда = 0;
	
	мЧастейДаты = СтрРазделить(СтрокаДаты, ".", Ложь);
	Если мЧастейДаты.Количество() = 1 Тогда
		Попытка
			ПреобразованнаяДата = Дата(мЧастейДаты[0]);
		Исключение
			ПреобразованнаяДата = Дата(1,1,1);
		КонецПопытки;
		Возврат ПреобразованнаяДата;
	ИначеЕсли мЧастейДаты.Количество() >= 3 Тогда
		Попытка
			Месяц = Число(мЧастейДаты[1]);
			Если СтрДлина(мЧастейДаты[0]) = 4 Тогда
				Год = Число(мЧастейДаты[0]);
				День = Число(мЧастейДаты[2]);
			ИначеЕсли СтрДлина(мЧастейДаты[2]) = 4 Тогда
				Год = Число(мЧастейДаты[2]);
				День = Число(мЧастейДаты[0]);
			Иначе
				Год = Число(?(мЧастейДаты[2] >= 50, Цел(Год(ТекущаяДата()) / 100) - 1,
					Цел(Год(ТекущаяДата()) / 100)) + мЧастейДаты[2]);
				День = Число(мЧастейДаты[0]);
			КонецЕсли;
			Час = ?(мЧастейДаты.Количество() > 3, Число(мЧастейДаты[3]), 0);
			Минута = ?(мЧастейДаты.Количество() > 4, Число(мЧастейДаты[4]), 0);
			Секунда = ?(мЧастейДаты.Количество() > 5, Число(мЧастейДаты[5]), 0);
		Исключение
			Возврат ПреобразованнаяДата;
		КонецПопытки;
	Иначе
		Возврат ПреобразованнаяДата;
	КонецЕсли;
	
	Попытка
		ПреобразованнаяДата = Дата(Год, Месяц, День, Час, Минута, Секунда);
	Исключение
		ПреобразованнаяДата = Дата(1,1,1);
	КонецПопытки;
	
	Если Не ПреобразованнаяДата = Дата(1,1,1) И НеобходимоПриводитьКМестномуВремени Тогда
		ТекущееСмещениеСек = СмещениеСтандартногоВремени();
		ТекСмещениеЧас = Цел(ТекущееСмещениеСек / 3600);
		ТекСмещениеМин = Цел((ТекущееСмещениеСек - ТекСмещениеЧас * 3600) / 60);
		ТекСмещениеМин = ?(ТекСмещениеМин < 0, -1 * ТекСмещениеМин, ТекСмещениеМин);
		
		ТекущийЧП = СтрШаблон("GMT%1%2:%3", ?(ТекСмещениеЧас >= 0, "+", ""),
			Формат(ТекСмещениеЧас, "ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=; ЧГ=0"),
			Формат(ТекСмещениеМин, "ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=; ЧГ=0"));
		ПришедшийЧП = СтрШаблон("GMT%1%2:%3", ?(ВремяМеньшеUTC, "-", "+"),
			Формат(СмещениеЧасы, "ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=; ЧГ=0"),
			Формат(СмещениеМинуты, "ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=; ЧГ=0"));
		Если ТекущийЧП = ПришедшийЧП Тогда
			Возврат ПреобразованнаяДата;
		КонецЕсли;
		
		Попытка
			Если СмещениеЧасы <> 0 Или СмещениеМинуты <> 0 Тогда
				ПреобразованнаяДата = УниверсальноеВремя(ПреобразованнаяДата, ПришедшийЧП);
			КонецЕсли;
			ПреобразованнаяДата = МестноеВремя(ПреобразованнаяДата, ТекущийЧП);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат ПреобразованнаяДата;
	
КонецФункции

Функция ПреобразоватьДатуКСтроке(Знач Дата, ПреобразоватьКУниверсальномуВремени = Ложь, ДобавлятьМиллиСекунды = Ложь, ДатаБезВремени = Ложь) Экспорт
	
	Если ТипЗнч(Дата) = Тип("Число") Тогда
		Сек = Цел(Дата / 1000);
		МиллиСек = Дата % 1000;
		Дата = Дата(1, 1, 1) + Сек;
		СмещениеЧас = 0;
		СмещениеМинуты = 0;
		ПреобразоватьКУниверсальномуВремени = Ложь;
	Иначе
		МиллиСек = 0;
		ТекущееСмещениеСек = СмещениеСтандартногоВремени();
		СмещениеЧас = Цел(ТекущееСмещениеСек / 3600);
		СмещениеМинуты = Цел((ТекущееСмещениеСек - СмещениеЧас * 3600) / 60);
		СмещениеМинуты = ?(СмещениеМинуты < 0, -1 * СмещениеМинуты, СмещениеМинуты);
	КонецЕсли;
	
	Если ПреобразоватьКУниверсальномуВремени Тогда
		ТекущийЧП = СтрШаблон("GMT%1:%2",
			Формат(СмещениеЧас, "ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=; ЧГ=0"),
			Формат(СмещениеМинуты, "ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=; ЧГ=0"));
		Дата = УниверсальноеВремя(Дата, ТекущийЧП); 
		СмещениеЧас = 0;
		СмещениеМинуты = 0;
	КонецЕсли;
	
	Возврат ?(ДатаБезВремени = Истина, Формат(Дата, "ДФ=гггг-ММ-дд; ДП=0001-01-01"),
		Формат(Дата, "ДФ=гггг-ММ-ддTЧЧ:мм:сс; ДП=0001-01-01T00:00:00")
		    + ?(ДобавлятьМиллиСекунды, "." + Формат(МиллиСек, "ЧЦ=3; ЧДЦ=0; ЧН=000; ЧВН=; ЧГ=0"), "")
			+ ?(СмещениеЧас = 0 И СмещениеМинуты = 0, "Z",
			СтрШаблон("%1%2:%3", ?(СмещениеЧас >= 0, "+", ""),
			Формат(СмещениеЧас, "ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=; ЧГ=0"),
			Формат(СмещениеМинуты, "ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=; ЧГ=0"))));
	
КонецФункции

//	Описание: Выполняет СКД и возвращает результат в виде табличного документа.
//	Возвращает: Табличный документ (Тип-0), Таблица значений (Тип-1), Дерево значений (Тип-2).
Функция ПолучитьРезультатСКД(АдресВхСхемыСКД, ТипРезультата, СтруктураПараметров = Неопределено, знач НастройкиСКД = Неопределено, НаборыДанных = Неопределено) Экспорт
 
	// 1. Инициализация настроек.
	СхемаСКД						=	ПолучитьИзВременногоХранилища(АдресВхСхемыСКД);
	КомпоновщикНастроек				=	Новый КомпоновщикНастроекКомпоновкиДанных;
	ИспользоватьНастройкиСКД		=	НастройкиСКД;

	Если ТипЗнч(ИспользоватьНастройкиСКД) <> Тип("НастройкиКомпоновкиДанных") Тогда

		ИспользоватьНастройкиСКД	=	СхемаСКД.НастройкиПоУмолчанию;

		КомпоновщикНастроек.Инициализировать( Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВхСхемыСКД) );

	КонецЕсли;


	//2. Загружаем настройки в компоновщик.
	КомпоновщикНастроек.ЗагрузитьНастройки(ИспользоватьНастройкиСКД);


	// 3. Установка параметров.
	Если СтруктураПараметров <> Неопределено Тогда

		Для каждого текКлючЗначение Из СтруктураПараметров Цикл

			// 1. Поиск параметра СКД в настройках СКД.
			ПараметрСКД					=	КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра( Новый ПараметрКомпоновкиДанных(текКлючЗначение.Ключ) );

			// 2. Проверка, что параметр существует.
			Если ПараметрСКД = Неопределено Тогда

				Продолжить;

			КонецЕсли; 

			// 3. Установка значения параметра.
			ПараметрСКД.Использование	=	ИСТИНА;
			ПараметрСКД.Значение		=	текКлючЗначение.Значение;

		КонецЦикла; 

	КонецЕсли; 


	// 4. Иницилизация и подготовка макета.
	Если ТипРезультата = 1 Тогда 

		КомпоновщикМакета				=	Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки					=	КомпоновщикМакета.Выполнить(СхемаСКД, КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		ПроцессорКомпоновки				=	Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, НаборыДанных);

		РезультатСКД					=	Новый ТаблицаЗначений;

		ПроцессорВывода					=	Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(РезультатСКД);

	ИначеЕсли ТипРезультата = 2 Тогда 

		КомпоновщикМакета				=	Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки					=	КомпоновщикМакета.Выполнить(СхемаСКД, КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		ПроцессорКомпоновки				=	Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, НаборыДанных);

		РезультатСКД					=	Новый ДеревоЗначений;

		ПроцессорВывода					=	Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(РезультатСКД);

	Иначе

		КомпоновщикМакета				=	Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки					=	КомпоновщикМакета.Выполнить(СхемаСКД, КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));
		ПроцессорКомпоновки				=	Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, НаборыДанных);

		РезультатСКД					=	Новый ТабличныйДокумент;

		ПроцессорВывода					=	Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(РезультатСКД);

	КонецЕсли; 


	// 5. Получение результата СКД.
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);


	// 6. Завершение работы процедуры.
	Возврат РезультатСКД;
 
КонецФункции

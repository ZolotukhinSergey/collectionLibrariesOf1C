
Функция ПолучитьДополнительноеСвойствоПоИмени(Имя, НаборСвойств = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|ГДЕ
		|	ДополнительныеРеквизитыИСведения.Имя = &Имя
		|	И &НаборСвойств";
	
	Запрос.УстановитьПараметр("Имя", Имя);
	Если НаборСвойств = Неопределено Тогда
		Запрос.УстановитьПараметр("НаборСвойств", Истина);
	Иначе
		Если ТипЗнч(НаборСвойств) = Тип("Строка") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НаборСвойств",
				"ДополнительныеРеквизитыИСведения.НаборСвойств.ИмяПредопределенногоНабора = &НаборСвойств");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НаборСвойств",
				"ДополнительныеРеквизитыИСведения.НаборСвойств = &НаборСвойств");
		КонецЕсли;
		Запрос.УстановитьПараметр("НаборСвойств", НаборСвойств);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru='Не удалось найти доп. свойство %1 по набору %2'"), Имя, НаборСвойств));
	Возврат Неопределено;
		
КонецФункции

Функция ПолучитьЗначениеДополнительногоРеквизитаПоНаименованию(Наименование, Свойство) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Владелец = &Владелец
		|	И ЗначенияСвойствОбъектов.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Владелец", Свойство);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиНаборДополнительныхРеквизитовИСведений(ИмяПредопределенногоНабора) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Ссылка,
		|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенногоНабора КАК ИмяПредопределенногоНабора,
		|	НаборыДополнительныхРеквизитовИСведений.Используется КАК Используется
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенногоНабора = &ИмяПредопределенногоНабора";
	
	Запрос.УстановитьПараметр("ИмяПредопределенногоНабора", ИмяПредопределенногоНабора);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
КонецФункции

Функция ПроверитьВключенаЛиДополнительнаяНастройкаПрограммы(ДопНастройка = Неопределено) Экспорт
	
	Если ТипЗнч(ДопНастройка) = Тип("Строка") Тогда
		ДопНастройка = КодОбщегоНазначенияПовтИсп.ПолучитьДополнительнуюНастройкуПрограммы(,, ДопНастройка)
	КонецЕсли;
	
	Возврат ТипЗнч(ДопНастройка) = Тип("Структура") И ДопНастройка.Свойство("Включена") И ДопНастройка.Включена;
	
КонецФункции

// Получает параметры из справочника дополнительные настройки программы
//
// Параметры:
//  ИмяПредопределенного  - Строка - Выполнить поиск по имени предопределенного элемента
//  Код  - Строка - Выполнить поиск по коду элемента
//  Наименование  - Строка - Выполнить поиск по наименованию элемента
//
// Возвращаемое значение:
//   Структура   - Структура состоящая из Ссылки на настройку, флага Включена и всех параметров указанных в ТЧ.
//
Функция ПолучитьДополнительнуюНастройкуПрограммы(ИмяПредопределенного = "", Код = "", Наименование = "") Экспорт
	
	Если ИмяПредопределенного = ""
		И Код = ""
		И Наименование = "" Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДополнительныеНастройкиПрограммы.Ссылка КАК Ссылка,
		|	ДополнительныеНастройкиПрограммы.Включена КАК Включена,
		|	ДополнительныеНастройкиПрограммы.Параметры.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Имя КАК Имя,
		|		Значение КАК Значение,
		|		ЗначениеСтрокой КАК ЗначениеСтрокой,
		|		ЗначениеХранилище КАК ЗначениеХранилище
		|	) КАК Параметры
		|ИЗ
		|	Справочник.ДополнительныеНастройкиПрограммы КАК ДополнительныеНастройкиПрограммы
		|ГДЕ
		|	(&ИмяПредопределенныхДанных = """"
		|			ИЛИ ДополнительныеНастройкиПрограммы.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных)
		|	И (&Код = """"
		|			ИЛИ ДополнительныеНастройкиПрограммы.Код = &Код)
		|	И (&Наименование = """"
		|			ИЛИ ДополнительныеНастройкиПрограммы.Наименование = &Наименование)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", ИмяПредопределенного);
	Запрос.УстановитьПараметр("Код", Код);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СтруктураВозврата = Новый Структура;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		СтруктураВозврата.Вставить("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
		СтруктураВозврата.Вставить("Включена", ВыборкаДетальныеЗаписи.Включена);
		
		Выборка = ВыборкаДетальныеЗаписи.Параметры.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ВыбранноеЗначение = Неопределено;
			Если Выборка.Значение <> Неопределено Тогда
				ВыбранноеЗначение = Выборка.Значение;
			ИначеЕсли Не ПустаяСтрока(Выборка.ЗначениеСтрокой) Тогда
				ВыбранноеЗначение = Выборка.ЗначениеСтрокой;
			Иначе
				ВыбранноеЗначение = Выборка.ЗначениеХранилище.Получить();
			КонецЕсли;
			
			Если СтруктураВозврата.Свойство(Выборка.Имя) Тогда
				Если ТипЗнч(СтруктураВозврата[Выборка.Имя]) = Тип("Массив") Тогда
					СтруктураВозврата[Выборка.Имя].Добавить(ВыбранноеЗначение);
				Иначе
					НовыйМассив = Новый Массив;
					НовыйМассив.Добавить(СтруктураВозврата[Выборка.Имя]);
					СтруктураВозврата[Выборка.Имя] = НовыйМассив;
					СтруктураВозврата[Выборка.Имя].Добавить(ВыбранноеЗначение);
				КонецЕсли;
			Иначе
				СтруктураВозврата.Вставить(Выборка.Имя, ВыбранноеЗначение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ВернутьПутьХраненияФайловВнешнихИсточников(НазваниеТома = "") Экспорт
	
	Если НазваниеТома = "" Тогда
		Возврат КодОбщегоНазначенияПовтИсп.ПолучитьПоНазваниюТомаПолныйПутьКаталога("x-wb-externalSource");
	Иначе
		Возврат КодОбщегоНазначенияПовтИсп.ПолучитьПоНазваниюТомаПолныйПутьКаталога(НазваниеТома);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПоНазваниюТомаПолныйПутьКаталога(НазваниеТома) Экспорт

	Том = Справочники.ТомаХраненияФайлов.НайтиПоНаименованию(НазваниеТома);
	Если Не ЗначениеЗаполнено(Том) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РазделительПути = ПолучитьРазделительПути();
	ЭтоЛинукс = РазделительПути = "/";
	ПолныйПуть = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Том, ?(ЭтоЛинукс, "ПолныйПутьLinux", "ПолныйПутьWindows"));
	Возврат ПолныйПуть;

КонецФункции
 
Функция ВернутьИмяЗначенияПеречисления(ЗначениеПеречисления, Порядок = Неопределено) Экспорт
	
	ЗначениеПеречисленияСтрокой = "";
	ТипЗначениеПеречисления = ТипЗнч(ЗначениеПеречисления);
	Если ТипЗначениеПеречисления = Тип("Строка") Тогда
		ЗначениеПеречисленияСтрокой = ЗначениеПеречисления;
	Иначе
		Попытка
			МетаПеречисление = Метаданные.НайтиПоТипу(ТипЗначениеПеречисления);
			Если ЗначениеЗаполнено(ЗначениеПеречисления) Тогда
				Если Порядок = Неопределено Тогда
					//Порядок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеПеречисления, "Порядок");
					ТекИндекс = Перечисления[МетаПеречисление.Имя].Индекс(ЗначениеПеречисления);
					ЗначениеПеречисленияСтрокой = МетаПеречисление.ЗначенияПеречисления[ТекИндекс].Имя;
				Иначе
					ЗначениеПеречисленияСтрокой = МетаПеречисление.ЗначенияПеречисления[Порядок].Имя;				
				КонецЕсли;
			Иначе
				//ЗначениеПеречисленияСтрокой = СтрШаблон("%1.ПустаяСсылка", МетаПеречисление.Имя);
				ЗначениеПеречисленияСтрокой = Неопределено;
			КонецЕсли;
		Исключение
			//ЗначениеПеречисленияСтрокой = Строка(ЗначениеПеречисления);
			ЗначениеПеречисленияСтрокой = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ЗначениеПеречисленияСтрокой;
	
КонецФункции

Функция ПолучитьМетодОбменаСообщениями(КодИлиМетод) Экспорт
	
	Возврат Справочники.МетодыОбменаСообщениями.ПолучитьМетодОбменаСообщениями(КодИлиМетод);
		
КонецФункции

Функция ПолучитьНастройкуСоединениеС_СетевымиСлужбами(АдресСервера, ТипСоединения = Неопределено) Экспорт
	
	Возврат Справочники.НастройкиСоединенияС_СетевымиСлужбами.ПолучитьНастройкуСоединениеС_СетевымиСлужбами(АдресСервера, ТипСоединения);
		
КонецФункции

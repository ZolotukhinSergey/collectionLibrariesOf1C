#Область ПрограммныйИнтерфейс

// Общая точка входа для обработки запросов
//
// Параметры:
//  ПараметрыМетода  - Соответствие - Параметры, необходимые для выполнения асинхронного запроса:
//			- ИдентификаторСообщения - Число - Идентификатор асинхронного сообщения обмена
//			- Метод - СправочникСсылка.МетодыОбменаСообщениями - Метод по которому необходимо произвести обработку запроса
//			- ЗапрашиваемыйМетод - Строка - имя вызванного метода
//			- id - Число - id объекта обмена
//			- Заголовки - Строка - Преобразованный в json заголовки запроса
//			- ПараметрыЗапроса - Строка - Преобразованный в json параметры запроса
//			- Тело - Строка - Преобразованный в json тело запроса
//			- ДанныеТела - Неопределено, Массив, Структура, Соответствие - данные тела запроса прочитанные из JSON
//			- HTTPМетод - Строка - по какому методу HTTP был послан запрос (GET, POST, ...)
//			- АдресДляОтвета - Строка - Адрес для асинхронного ответа.
//  Ответ  - Структура, HTTPСервисОтвет - Сервис ответ, в который будет помещен результат обработки запроса.
//
// Возвращаемое значение:
//   Структура, HTTPСервисОтвет   - Сервис ответ с результатом обработки запроса.
//
Функция ОбщаяТочкаВходаВсехМетодовСервиса(ПараметрыМетода, Ответ = Неопределено, МенеджерСообщения = Неопределено) Экспорт
	
	Попытка
		Если ПараметрыМетода.ЗапрашиваемыйМетод = "healthCheck" Тогда
			Возврат СформироватьСервисОтвет(Ответ, 200);
		// задумка универсального асинхронного
		ИначеЕсли ПараметрыМетода.ЗапрашиваемыйМетод = "asynchronousResponse" Тогда
			Ответ = ОбработатьЗапрос_asynchronousResponse(ПараметрыМетода, Ответ);
		// пример
		ИначеЕсли ПараметрыМетода.ЗапрашиваемыйМетод = "uploadingChanges" Тогда
			Ответ = ОбработатьЗапрос_uploadingChanges(ПараметрыМетода, Ответ, МенеджерСообщения);
		// пример универсальнго входа сообщений из кролика, если работа с ним сделана через внешнюю службу
		ИначеЕсли ПараметрыМетода.ЗапрашиваемыйМетод = "incomingEvent" Тогда
			Ответ = ОбработатьЗапрос_incomingEvent(ПараметрыМетода, Ответ, МенеджерСообщения);
		Иначе
			СформироватьСервисОтвет(Ответ, 400, "ERROR", СтрШаблон(
				НСтр("ru='Не известный метод сервиса %1'"), ПараметрыМетода.ЗапрашиваемыйМетод));
		КонецЕсли;
	Исключение
		СформироватьСервисОтвет(Ответ, 500, "ERROR", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,,,
			ПараметрыМетода.ЗапрашиваемыйМетод);
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

// Общая точка входа для асинхронным методов сервиса
//
// Параметры:
//  ПараметрыМетода  - Структура - Параметры, необходимые для выполнения асинхронного запроса:
//			- ИдентификаторСообщения - Число - Идентификатор асинхронного сообщения обмена
//			- Метод - СправочникСсылка.МетодыОбменаСообщениями - Метод по которому необходимо произвести обработку запроса
//			- ЗапрашиваемыйМетод - Строка - имя вызванного метода
//			- id - Число - id объекта обмена
//			- Заголовки - Строка - Преобразованный в json заголовки запроса
//			- ПараметрыЗапроса - Строка - Преобразованный в json параметры запроса
//			- Тело - Строка - Преобразованный в json тело запроса
//			- ДанныеТела - Неопределено, Массив, Структура, Соответствие - данные тела запроса прочитанные из JSON
//			- HTTPМетод - Строка - по какому методу HTTP был послан запрос (GET, POST, ...)
//			- АдресДляОтвета - Строка - Адрес для асинхронного ответа.
//
Процедура ОбщаяТочкаВходаВсехАсинхронныхМетодовСервиса(ПараметрыМетода) Экспорт
	
	Ответ = СформироватьСервисОтвет();
	НужноДобавлятьПоследнееСообщение = Ложь;
	
	Попытка
		
		Если ПараметрыМетода.id <> 0 Тогда
			
			// Транзакция нужна чтобы пока мы не проверили номер сообщения и не выполнили обработку запроса,
			// другое сообщение с тем же объектом не было загружено
			НачатьТранзакцию();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПоследнееПринятоеАсинхронноеСообщениеПоID");
			ЭлементБлокировки.УстановитьЗначение("id", ПараметрыМетода.id);
			ЭлементБлокировки.УстановитьЗначение("Метод", ПараметрыМетода.Метод);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			МЗ = РегистрыСведений.ПоследнееПринятоеАсинхронноеСообщениеПоID.СоздатьМенеджерЗаписи();
			МЗ.id = ПараметрыМетода.id;
			МЗ.Метод = ПараметрыМетода.Метод;
			МЗ.Прочитать();
			Если Не ЗначениеЗаполнено(МЗ.ИдентификаторСообщения)
				Или ТипЗнч(ПараметрыМетода.ИдентификаторСообщения) = Тип("Число")
					И ПараметрыМетода.ИдентификаторСообщения > Число(МЗ.ИдентификаторСообщения)
				Или ТипЗнч(ПараметрыМетода.ИдентификаторСообщения) = Тип("Строка") Тогда
				
				Ответ = ОбщаяТочкаВходаВсехМетодовСервиса(ПараметрыМетода, Ответ);
				НужноДобавлятьПоследнееСообщение = Истина;
				
			Иначе
				
				ОтменитьТранзакцию(); // Ранее было принято сообщение с большим номером, значит не будем загружать эту версию
				
			КонецЕсли;
			
		Иначе
			
			Ответ = ОбщаяТочкаВходаВсехМетодовСервиса(ПараметрыМетода, Ответ);
			
		КонецЕсли;
		
	Исключение
		
		СформироватьСервисОтвет(Ответ, 400, "ERROR", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	ЧастиАдресаСервисаДляОтвета = ПолучитьСоставляющиеАдресаСервиса(ПараметрыМетода.АдресДляОтвета);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-type", "application/json;charset=utf-8");
	Заголовки.Вставить("messageID", ПараметрыМетода.ИдентификаторСообщения);
	Заголовки.Вставить("StatusCode", Ответ.КодСостояния);
	Заголовки.Вставить("Reason", Ответ.Причина);
		
	ЗащищенноеСоединение = ЗначениеЗаполнено(ЧастиАдресаСервисаДляОтвета.ЗащищенноеСоединение); 
	
	Ответ = ОбменСообщениямиССервисами.ОтправитьЗапросHTTP(ЧастиАдресаСервисаДляОтвета.АдресСервера, ЧастиАдресаСервисаДляОтвета.АдресРесурса,
		Заголовки, ПараметрыМетода.Метод, Ответ.Тело, 70, ЗащищенноеСоединение,,,, ЧастиАдресаСервисаДляОтвета.Порт,,,
		,,,,,, ПараметрыМетода.id);
	
	Если Ответ.КодСостояния = 200 Тогда
		Попытка
			МенеджерЗаписи = РегистрыСведений.ОчередьАсинхронныхСообщенийОбмена.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ИдентификаторСообщения = ПараметрыМетода.ИдентификаторСообщения;
			МенеджерЗаписи.Метод = ПараметрыМетода.Метод;
			МенеджерЗаписи.Направление = ПредопределенноеЗначение("Перечисление.ТипНаправленияСообщенияОбменаСервиса.Входящий");
			МенеджерЗаписи.Удалить();
		Исключение
		КонецПопытки;
		Если НужноДобавлятьПоследнееСообщение Тогда
			Попытка
				МЗ = РегистрыСведений.ПоследнееПринятоеАсинхронноеСообщениеПоID.СоздатьМенеджерЗаписи();
				МЗ.id = ПараметрыМетода.id;
				МЗ.Метод = ПараметрыМетода.Метод;
				МЗ.ИдентификаторСообщения = ПараметрыМетода.ИдентификаторСообщения;
				МЗ.Записать();
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Записывает лог сообщений обмена в РС СообщенияОбменаСервисов по переданной структуре параметров
//
// Параметры:
//  СтруктураПараметров  - Структура - Структура для заполнения записи регистра, описание можно получить
//		ОбменСообщениямиССервисами.ПолучитьСтруктуруПараметровДляЗаписиСообщенийОбмена
// Возвращаемое значение:
//   РегистрыСведенийМенеджерЗаписи.СообщенияОбменаСервисов   - Заполненный менеджер записи регистра
//
Функция ЗаписатьСообщениеОбмена(СтруктураПараметров) Экспорт
	
	Если ТранзакцияАктивна() Тогда
		мПараметров = Новый Массив(1);
		мПараметров[0] = СтруктураПараметров;
		ФоновыеЗадания.Выполнить("ОбменСообщениямиССервисами.ЗаписатьСообщениеОбмена", мПараметров,,
			СтрШаблон(НСтр("ru='Запись сообщения обмена по %1'"), СтруктураПараметров.Метод));
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СообщениеОбмена = РегистрыСведений.СообщенияОбменаСервисов.СоздатьМенеджерЗаписи();
	ВключенаЗапись = КодОбщегоНазначения.ПроверитьВключенаЛиДополнительнаяНастройкаПрограммы("Запись лога сообщений обмена");
	Если Не ВключенаЗапись Тогда
		Возврат СообщениеОбмена;
	КонецЕсли;
	
	ДатаСобытия = ТекущаяДатаСеанса();
	ВремяСобытия = ТекущаяУниверсальнаяДатаВМиллисекундах();
	НомерСеанса = ПолучитьТекущийСеансИнформационнойБазы().НомерСеанса;
	
	Попытка
		ЗаполнитьЗначенияСвойств(СообщениеОбмена, СтруктураПараметров);
		
		Если Не ЗначениеЗаполнено(СообщениеОбмена.ВремяСобытия) Тогда
			СообщениеОбмена.ВремяСобытия = ВремяСобытия;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СообщениеОбмена.НомерСеанса) Тогда
			СообщениеОбмена.НомерСеанса = НомерСеанса;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СообщениеОбмена.ДатаСобытия) Тогда
			СообщениеОбмена.ДатаСобытия = ДатаСобытия;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СообщениеОбмена.ДеньСобытия) Тогда
			СообщениеОбмена.ДеньСобытия = НачалоДня(ДатаСобытия);
		КонецЕсли;
		СообщениеОбмена.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
		СообщениеОбмена.Записать(Ложь);
	Исключение
		РаботаС_Sentry.ОтправитьЛогПоИсключению(ИнформацияОбОшибке(),, СообщениеОбмена.id, "ЗаписатьСообщениеОбмена");
		ЗаписьЖурналаРегистрации("ЗаписьСообщенияОбмена", УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.СообщенияОбменаСервисов,, СтрШаблон(НСтр(
			"ru='Не удалось записать сообщение обмена для метода %1 по причине %2'"), СообщениеОбмена.Метод, ОписаниеОшибки()));
	КонецПопытки;
	
	Возврат СообщениеОбмена;
	
КонецФункции

// Записывает данные в РС ОчередьАсинхронныхСообщенийОбмена по переданной структуре параметров
//
// Параметры:
//  СтруктураПараметров  - Структура - Структура для заполнения записи регистра
//
Процедура ЗаписатьВОчередьАсинхронныхСообщенийОбмена(ПараметрыЗаписиСообщения) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ОчередьАсинхронныхСообщенийОбмена.СоздатьМенеджерЗаписи();
	
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ПараметрыЗаписиСообщения);
	
	МенеджерЗаписи.ДатаСобытия = ТекущаяДата();
	
	Попытка
		МенеджерЗаписи.Записать();		
	Исключение
		Сообщить("ЗаписатьВОчередьАсинхронныхСообщенийОбмена() " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

// Записывает данные  HTTPЗапрос и HTTPОтвет(когда код <> 200) в РС СообщенияОбменаСервисов  
//      и  данные HTTPЗапрос-а в РС ОчередьАсинхронныхСообщенийОбмена
//
// Параметры:
//  HTTPЗапрос  - HTTPЗапрос или Неопределено. 
//	Ответ  		- HTTPОтвет
//	Соединение  - HTTPСоединение 
//  Метод  - СправочникСсылка.МетодыОбменаСообщениями - Метод сервиса по которому происходит запрос или ответ.
//  id  - Число - Идентификатор объекта по которому происходит обмен.
//  ИдентификаторСообщения  - Число, Строка - Идентификатор сообщения для удобного поиска сообщения. Если код состояния <> 200 в 
//  РС ОчередьАсинхронныхСообщенийОбмена измерение ИдентификаторСообщения равно ВремяСобытия из РС СообщенияОбменаСервисов.
//
Процедура ЗаписатьВЛог(HTTPЗапрос = Неопределено, Ответ, Соединение, ТекущийМетод, ID = 0, ИдентификаторСообщения = 0,
	Входящий = Ложь, HTTPМетод = "POST") Экспорт

	Если Ответ = Неопределено Тогда
	
		Ответ = Новый HTTPСервисОтвет(500);
	
	КонецЕсли;
	
	Если HTTPЗапрос <> Неопределено Тогда
									
		ПараметрыЗаписиСообщения = ОбменСообщениямиССервисами.ПолучитьСтруктуруПараметровДляЗаписиСообщенийОбмена(HTTPЗапрос,
			ТекущийМетод, Входящий, ID, ИдентификаторСообщения,,, Соединение, HTTPМетод);
		ПараметрыЗаписиСообщения.КодСостояния = Ответ.КодСостояния;
		
		ОбменСообщениямиССервисами.ЗаписатьСообщениеОбмена(ПараметрыЗаписиСообщения);
		
		Если Ответ.КодСостояния >= 300 Тогда
		
			ОбменСообщениямиССервисами.ЗаписатьВОчередьАсинхронныхСообщенийОбмена(ПараметрыЗаписиСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыЗаписиОтвет = ОбменСообщениямиССервисами.ПолучитьСтруктуруПараметровДляЗаписиСообщенийОбмена(Ответ,
		ТекущийМетод, Истина, ID, ИдентификаторСообщения,,, Соединение, HTTPМетод);
	ОбменСообщениямиССервисами.ЗаписатьСообщениеОбмена(ПараметрыЗаписиОтвет);
	
КонецПроцедуры

// Устанавливает свойства сервис ответа по переданным параметрам
//
// Параметры:
//  Ответ  - Структура, HTTPСервисОтвет - Сервис ответ, которому необходимо установить свойства
//  КодОтвета  - Число - код состояния ответа
//  КодТекста  - Строка - Кодовое представления состояния ответа
//  ОписаниеСообщения  - Строка - подробное описание сообщения ответа
//  ДанныеОтвета  - Неопределено, Массив, Структура, Соответствие - значение, которое нужно упаковать в тело ответа
//  ТегДанныхОтвета  - Строка - название ключа для помещения данных в структуру тела ответа
//  НужноДобавлятьСлужебныеПоля  - Булево - признак добавления служебных ключей code и message в тело ответа (по умолчанию истина)
//
// Возвращаемое значение:
//   Структура, HTTPСервисОтвет   - Сервис ответ с установленными свойствами
//
Функция СформироватьСервисОтвет(Ответ = Неопределено, КодОтвета = 200, КодТекста = "", ОписаниеСообщения = "",
	ДанныеОтвета = Неопределено, ТегДанныхОтвета = "", НужноДобавлятьСлужебныеПоля = Истина, ИмяМетода = "") Экспорт
	
	Если Ответ = Неопределено Тогда
		//#Если ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		//	Ответ = Новый Структура("КодСостояния, Причина, Тело");
		//#Иначе
			Ответ = Новый HTTPСервисОтвет(КодОтвета);
		//#КонецЕсли
	КонецЕсли;
	
	Ответ.КодСостояния = КодОтвета;
	Ответ.Причина = ОписаниеСообщения;
	
	Данные = Новый Структура;
	Если НужноДобавлятьСлужебныеПоля Тогда
		Данные.Вставить("code", ?(КодТекста = "", "OK", КодТекста));
		Данные.Вставить("message", ОписаниеСообщения);
	КонецЕсли;
	Если ДанныеОтвета <> Неопределено Тогда
		Данные.Вставить(?(ТегДанныхОтвета = "", "data", ТегДанныхОтвета), ДанныеОтвета);
	КонецЕсли;
	
	ДанныеСтрокойJSON = ПреобразоватьДанныеВ_JSON(Данные);
	
	Если КодОтвета <> 200 Тогда
		ЗаписьЖурналаРегистрации("Сформирована ошибка в ответ", УровеньЖурналаРегистрации.Ошибка,,,
			СтрШаблон("%1: %2", ИмяМетода, ОписаниеСообщения));
	КонецЕсли;
	
	Если ТипЗнч(Ответ) = Тип("Структура") Тогда
		Ответ.Тело = ДанныеСтрокойJSON;
	Иначе
		Ответ.УстановитьТелоИзСтроки(ДанныеСтрокойJSON);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Получает из тела запроса значение закодированное в JSON
//
// Параметры:
//  Запрос  - HTTPСервисЗапрос - Из которого нужно получить значения тела
//  Ответ  - HTTPСервисОтвет - если произошла ошибка чтения JSON из тела,
//                 то в ответ устанавливается ошибка.
//  УдалитьПлюс  - Булево - нужно ли удалять знак "+" перед чтением JSON.
//
// Возвращаемое значение:
//   Неопределено, Массив, Структура, Соответствие   - значение, прочитанное из переданого запроса
//
Функция ПолучитьТелоЗапроса(Запрос, Ответ, УдалитьПлюс = Ложь, ПрочитатьВСоответствие = Ложь, РаскодироватьСтроку = Ложь) Экспорт
	
	// читаем тело запроса в формате JSON и возвращаем в виде структуры
	ТекстОтвета = Запрос.ПолучитьТелоКакСтроку();
	
	Попытка
		Возврат ПрочитатьJSONвДанные(ТекстОтвета, УдалитьПлюс, ПрочитатьВСоответствие, РаскодироватьСтроку);
	Исключение
		СформироватьСервисОтвет(Ответ, 400, "ERROR", "Ошибка формата JSON в теле запроса");
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Повторная отпрвка Http запроса из РС ОчередьАсинхронныхСообщенийОбмена
//
Процедура ПовторнаяОтправкаИзОчередьАсинхронныхСообщенийОбмена() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщить("СТАРТ " + ТекущаяДата());
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МетодыОбменаСообщениями.Ссылка КАК Метод,
		|	МетодыОбменаСообщениями.Код КАК МетодИмя
		|ПОМЕСТИТЬ НастройкиОтправкиДанных
		|ИЗ
		|	Справочник.МетодыОбменаСообщениями КАК МетодыОбменаСообщениями
		|ГДЕ
		|	НЕ МетодыОбменаСообщениями.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ОчередьАсинхронныхСообщенийОбмена.Метод КАК Метод,
		|	ОчередьАсинхронныхСообщенийОбмена.ИдентификаторСообщения КАК ИдентификаторСообщения,
		|	ОчередьАсинхронныхСообщенийОбмена.Направление КАК Направление,
		|	ОчередьАсинхронныхСообщенийОбмена.Заголовки КАК Заголовки,
		|	ОчередьАсинхронныхСообщенийОбмена.Тело КАК Тело,
		|	Настройки.МетодИмя КАК МетодИмя,
		|	ОчередьАсинхронныхСообщенийОбмена.Параметры КАК Параметры,
		|	ОчередьАсинхронныхСообщенийОбмена.id КАК id,
		|	ОчередьАсинхронныхСообщенийОбмена.ДатаСобытия КАК ДатаСобытия
		|ИЗ
		|	НастройкиОтправкиДанных КАК Настройки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьАсинхронныхСообщенийОбмена КАК ОчередьАсинхронныхСообщенийОбмена
		|		ПО Настройки.Метод = ОчередьАсинхронныхСообщенийОбмена.Метод
		|			И (ОчередьАсинхронныхСообщенийОбмена.Направление = ЗНАЧЕНИЕ(Перечисление.ТипНаправленияСообщенияОбменаСервиса.Исходящий))";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Сообщить("Количество в Выборке " + Выборка.Количество() + " " + ТекущаяДата());
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
		
			Параметры = ОбменСообщениямиССервисами.ПрочитатьJSONвДанные(Выборка.Параметры);
			Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не Параметры.Свойство("HTTPМетод") Тогда
				Параметры.Вставить("HTTPМетод", "POST");
			КонецЕсли;

			Сервер  = Параметры.Сервер;
			Порт    = Параметры.Порт;
			Таймаут = Параметры.Таймаут;
			ЗащищенноеСоединение = Параметры.ЗащищенноеСоединение;
			Пользователь = Неопределено;
			Пароль = Неопределено;
			Параметры.Свойство("Пользователь", Пользователь);
			Параметры.Свойство("Пароль", Пароль);
			
			Метод = ?(Параметры.Свойство("Метод"), Параметры.Метод, Выборка.МетодИмя);
			
			Заголовки = ОбменСообщениямиССервисами.ПрочитатьJSONвДанные(Выборка.Заголовки,, Истина);
			Если НЕ ТипЗнч(Заголовки) = Тип("Соответствие") Тогда
				Заголовки = Новый Соответствие;
			КонецЕсли;
			
			АвторизацияЧерез = Неопределено;
			Параметры.Свойство("АвторизацияЧерез", АвторизацияЧерез);
			
			ПопыткаПереотправки = Неопределено;
			Параметры.Свойство("ПопыткаПереотправки", ПопыткаПереотправки);
			Если ПопыткаПереотправки = Неопределено Тогда
				ПопыткаПереотправки = 1;
			Иначе
				ПопыткаПереотправки = ПопыткаПереотправки + 1;
			КонецЕсли;
			
			ОтправлятьМетрику = Неопределено;
			Параметры.Свойство("ОтправлятьМетрику", ОтправлятьМетрику);
			Если ОтправлятьМетрику = Неопределено Тогда
				ОтправлятьМетрику = Истина;
			КонецЕсли;
			
			НеСохранятьЛог = Неопределено;
			Параметры.Свойство("НеСохранятьЛог", НеСохранятьЛог);
			Если НеСохранятьЛог = Неопределено Тогда
				НеСохранятьЛог = Ложь;
			КонецЕсли;
			
			ДатаПоследнейПопытки = Выборка.ДатаСобытия;
			
			ПрошлоСекунд = ТекущаяДатаСеанса() - ДатаПоследнейПопытки;
			МожноОтправлять = Ложь;
			Если ПопыткаПереотправки <= 1 Тогда
				МожноОтправлять = Истина;
			ИначеЕсли ПопыткаПереотправки <= 5 И ПрошлоСекунд >= 60 Тогда
				МожноОтправлять = Истина;
			ИначеЕсли ПопыткаПереотправки <= 10 И ПрошлоСекунд >= 5*60 Тогда
				МожноОтправлять = Истина;
			ИначеЕсли ПопыткаПереотправки > 10 И ПрошлоСекунд >= 30*60 Тогда
				МожноОтправлять = Истина;
			КонецЕсли;
			
			Если Не МожноОтправлять Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущийМетод = Выборка.Метод;
			Ответ = ОбменСообщениямиССервисами.ОтправитьЗапросHTTP(Сервер, Метод, Заголовки, ТекущийМетод, Выборка.Тело,
				Таймаут, ЗащищенноеСоединение, Параметры.HTTPМетод,,, Порт ,,, Пользователь, Пароль,,,, АвторизацияЧерез,
				Выборка.id,,,,,, НеСохранятьЛог,, ОтправлятьМетрику);
			
			ДатаПоследнейПопытки = ТекущаяДатаСеанса();	
			Параметры.Вставить("ПопыткаПереотправки", ПопыткаПереотправки);
			МЗ = РегистрыСведений.ОчередьАсинхронныхСообщенийОбмена.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МЗ, Выборка);
			
			Если Ответ.КодСостояния >= 200 И Ответ.КодСостояния <= 299 Тогда
				
				//НаборЗаписей = РегистрыСведений.ОчередьАсинхронныхСообщенийОбмена.СоздатьНаборЗаписей();
				//НаборЗаписей.Отбор.Метод.Установить(Выборка.Метод);
				//НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(Выборка.ИдентификаторСообщения);
				//НаборЗаписей.Отбор.Направление.Установить(Выборка.Направление);
				
				Попытка
					//НаборЗаписей.Записать();
					МЗ.Удалить();
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтрШаблон(НСтр("ru='Не удалось удалить запись АсинхронныхСообщенийОбмена по методу %1 ИдентификаторСообщения %2 по причине %3'"),
						Выборка.Метод, Выборка.ИдентификаторСообщения, ОписаниеОшибки()));
				КонецПопытки;
			Иначе
				
				МЗ.ДатаСобытия = ДатаПоследнейПопытки;
				МЗ.Параметры = ОбменСообщениямиССервисами.ПреобразоватьДанныеВ_JSON(Параметры, Истина);
				Попытка
					МЗ.Записать();
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтрШаблон(НСтр("ru='Не удалось перезаписать запись АсинхронныхСообщенийОбмена по методу %1 ИдентификаторСообщения %2 по причине %3'"),
						Выборка.Метод, Выборка.ИдентификаторСообщения, ОписаниеОшибки()));
				КонецПопытки;
				
			КонецЕсли;
			
		Исключение
			Сообщить(ОписаниеОшибки());		
		КонецПопытки;
		
	КонецЦикла;
	
	Сообщить("ФИНИШ " + ТекущаяДата());
	
КонецПроцедуры

Функция ОтправитьЗапросHTTP(Знач ИмяСервера, Знач АдресРесурса = "", Знач Заголовки = Неопределено, ТекущийМетод = "", Тело = Неопределено,
	Таймаут = 60, ИспользоватьHTTPS = Ложь, HTTPМетод = "POST", СпособУстановкиТела = "КакСтроку",
	ПараметрыURL = Неопределено, Порт = Неопределено, СертификатКлиента = Неопределено, СертификатСервера = Неопределено,
	Пользователь = Неопределено, Пароль = Неопределено, ИмяФайлаОтвета = "", ПереотправлятьПриОшибке = Ложь,
	ПараметрыЗаписиИсходящегоСообщения = Неопределено, АвторизацияЧерез = Неопределено, id = 0,
	КодировкаТекстаТела = "UTF-8", ИспользоватьBOMТела = Неопределено, ОтправлятьЛогПриНеудаче = Истина,
	ДобавлятьИдентификаторЗапроса = Истина, ОтветСохранятьКакДвоичныеДанные = Ложь, НеСохранятьЛог = Ложь,
	ОтправитьЧерезРСОчередь = Ложь, ОтправлятьМетрику = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбщегоНазначенияКлиентСерверПовтИсп.ПроверитьВозможностьВыполнения() Тогда
		Возврат ОбменСообщениямиССервисами.СформироватьСервисОтвет(, 200);
	КонецЕсли;
	
	Если Заголовки = Неопределено Тогда
		Заголовки = Новый Соответствие;
	КонецЕсли;
	
	Если ТипЗнч(ТекущийМетод) = Тип("Строка") И Не ПустаяСтрока(ТекущийМетод) Тогда
		Если СтрНайти(ТекущийМетод, "?") <> 0 И СтрНайти(ТекущийМетод, "=") <> 0 Тогда
			ТекущийМетод = Лев(ТекущийМетод, СтрНайти(ТекущийМетод, "?") - 1);
		КонецЕсли;
		ТекущийМетод = ОбменСообщениямиССервисами.ПолучитьМетодОбменаСообщениямиПоКоду(ТекущийМетод, Истина);
	ИначеЕсли Не ТипЗнч(ТекущийМетод) = Тип("СправочникСсылка.МетодыОбменаСообщениями") Тогда
		ТекущийМетод = Неопределено;
	КонецЕсли;
	
	ИмяВремФайлаСертификатаКлиента = Неопределено;
	ИмяВремФайлаСертификатаСервера = Неопределено;
	
	//ОбменСообщениямиССервисами.ПолучитьМетодОбменаСообщениями(ИмяСервера, АдресРесурса, ТекущийМетод,
	//	Таймаут, ИспользоватьHTTPS, HTTPМетод, Порт, СертификатКлиента, СертификатСервера,
	//	Пользователь, Пароль, ПереотправлятьПриОшибке, АвторизацияЧерез, КодировкаТекстаТела, ОтправлятьЛогПриНеудаче,
	//	ДобавлятьИдентификаторЗапроса, ОтветСохранятьКакДвоичныеДанные, НеСохранятьЛог,
	//	ОтправитьЧерезРСОчередь, ОтправлятьМетрику, ИмяВремФайлаСертификатаКлиента, ИмяВремФайлаСертификатаСервера);
	
	Соединение = Новый HTTPСоединение(ИмяСервера, Порт, Пользователь, Пароль,, Таймаут,
		?(ИспользоватьHTTPS = Истина, Новый ЗащищенноеСоединениеOpenSSL(СертификатКлиента, СертификатСервера), Неопределено));
		
	АдресРесурсаДо = АдресРесурса;
	Если ТипЗнч(ПараметрыURL) = Тип("Массив") И ПараметрыURL.Количество() > 0 Тогда
		Для Каждого ЭлементПараметраURL Из ПараметрыURL Цикл
			ЭлементПараметраURL = КодироватьСтроку(ЭлементПараметраURL, СпособКодированияСтроки.КодировкаURL);
		КонецЦикла;
		АдресРесурса = СтрШаблон("%1?%2", АдресРесурса, СтрСоединить(ПараметрыURL, "&"));
	ИначеЕсли ТипЗнч(ПараметрыURL) = Тип("Структура") И ПараметрыURL.Количество() > 0 Тогда
		мСтрокиПараметров = Новый Массив;
		Для Каждого СтруктураПараметров Из ПараметрыURL Цикл
			мСтрокиПараметров.Добавить(СтрШаблон("%1=%2", СтруктураПараметров.Ключ, //СтруктураПараметров.Значение));
				КодироватьСтроку(СтруктураПараметров.Значение, СпособКодированияСтроки.КодировкаURL)));
		КонецЦикла;
		АдресРесурса = СтрШаблон("%1?%2", АдресРесурса, СтрСоединить(мСтрокиПараметров, "&"));
	ИначеЕсли ТипЗнч(ПараметрыURL) = Тип("Строка") И Не ПустаяСтрока(ПараметрыURL) Тогда
		АдресРесурса = СтрШаблон("%1?%2", АдресРесурса, ПараметрыURL);
	КонецЕсли;
	
	Если АвторизацияЧерез <> Неопределено Тогда
		ОбменСообщениямиССервисами.ДобавитьАвторизациюВЗаголовки(Заголовки, АвторизацияЧерез);
	КонецЕсли;
	
	Если Заголовки.Получить("WB-Request-Id") = Неопределено Тогда
		ИдентификаторСообщения = Строка(Новый УникальныйИдентификатор);
		Если ДобавлятьИдентификаторЗапроса Тогда
			Заголовки.Вставить("WB-Request-Id", ИдентификаторСообщения);
		КонецЕсли;
	Иначе
		ИдентификаторСообщения = Заголовки.Получить("WB-Request-Id");
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	Если Тело <> Неопределено И СпособУстановкиТела = "КакСтроку" Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело, КодировкаТекстаТела,
			?(ИспользоватьBOMТела = Неопределено, ИспользованиеByteOrderMark.Авто,
			?(ИспользоватьBOMТела = Истина, ИспользованиеByteOrderMark.Использовать, ИспользованиеByteOrderMark.НеИспользовать)));
	ИначеЕсли Тело <> Неопределено И СпособУстановкиТела = "КакДвоичныеДанные" Тогда
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(Тело);
	ИначеЕсли Тело <> Неопределено И СпособУстановкиТела = "КакИмяФайла" Тогда
		HTTPЗапрос.УстановитьИмяФайлаТела(Тело);
	КонецЕсли;
	
	ПараметрыЗаписиИсходящегоСообщения = Неопределено;
	Если ОтправитьЧерезРСОчередь = Истина Тогда
		
		ПараметрыЗаписиИсходящегоСообщения = ОбменСообщениямиССервисами.ПолучитьСтруктуруПараметровДляЗаписиСообщенийОбмена(
			HTTPЗапрос, ТекущийМетод, Ложь, id, ИдентификаторСообщения, Истина, КодировкаТекстаТела, Соединение, HTTPМетод, АдресРесурса, ПараметрыURL);
		ПараметрыСервера = ОбменСообщениямиССервисами.ПреобразоватьДанныеВ_JSON(Новый Структура(
			"Сервер, Порт, Таймаут, ЗащищенноеСоединение, Метод, Пользователь, Пароль, АвторизацияЧерез, HTTPМетод, " +
			"ОтветСохранятьКакДвоичныеДанные, НеСохранятьЛог, ОтправлятьМетрику", 
			ИмяСервера, Порт, Таймаут, ИспользоватьHTTPS, АдресРесурса, Пользователь, Пароль, АвторизацияЧерез, HTTPМетод,
			ОтветСохранятьКакДвоичныеДанные, НеСохранятьЛог, ОтправлятьМетрику));
										
		ПараметрыЗаписиИсходящегоСообщения.Вставить("Параметры", ПараметрыСервера);
		Если Не ЗначениеЗаполнено(ПараметрыЗаписиИсходящегоСообщения.ИдентификаторСообщения) Тогда
			ПараметрыЗаписиИсходящегоСообщения.Вставить("ИдентификаторСообщения",  ПараметрыЗаписиИсходящегоСообщения.ВремяСобытия);
		КонецЕсли;
		
		ОбменСообщениямиССервисами.ЗаписатьВОчередьАсинхронныхСообщенийОбмена(ПараметрыЗаписиИсходящегоСообщения);
		Возврат ОбменСообщениямиССервисами.СформироватьСервисОтвет(, 200);
		
	КонецЕсли;
	
	Если НеСохранятьЛог = Ложь Тогда
		ВключенаЗапись = КодОбщегоНазначения.ПроверитьВключенаЛиДополнительнаяНастройкаПрограммы("Запись лога сообщений обмена");
		Если ЗначениеЗаполнено(ТекущийМетод) И ВключенаЗапись Тогда
			Если ПараметрыЗаписиИсходящегоСообщения = Неопределено Тогда
				ПараметрыЗаписиИсходящегоСообщения = ОбменСообщениямиССервисами.ПолучитьСтруктуруПараметровДляЗаписиСообщенийОбмена(
					HTTPЗапрос, ТекущийМетод, Ложь, id, ИдентификаторСообщения, Истина, КодировкаТекстаТела, Соединение, HTTPМетод, АдресРесурса, ПараметрыURL);
			КонецЕсли;
			//Если ТранзакцияАктивна() Тогда
			//	мПараметров = Новый Массив(1);
			//	мПараметров[0] = ПараметрыЗаписиИсходящегоСообщения;
			//	ФоновыеЗадания.Выполнить("ОбменСообщениямиССервисами.ЗаписатьСообщениеОбмена", мПараметров,,
			//		СтрШаблон(НСтр("ru='Запись исходящего сообщения обмена по %1'"), ТекущийМетод));
			//Иначе
				ОбменСообщениямиССервисами.ЗаписатьСообщениеОбмена(ПараметрыЗаписиИсходящегоСообщения);
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВремяЗапроса = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Попытка
		Если ВРег(HTTPМетод) = "POST" Или ПустаяСтрока(HTTPМетод) Тогда
			Результат  = Соединение.ОтправитьДляОбработки(HTTPЗапрос, ИмяФайлаОтвета);
		ИначеЕсли ВРег(HTTPМетод) = "PUT" Тогда
			Результат  = Соединение.Записать(HTTPЗапрос);
		ИначеЕсли ВРег(HTTPМетод) = "PATCH" Тогда
			Результат  = Соединение.Изменить(HTTPЗапрос);
		ИначеЕсли ВРег(HTTPМетод) = "GET" Тогда
			Результат  = Соединение.Получить(HTTPЗапрос, ИмяФайлаОтвета);
		ИначеЕсли ВРег(HTTPМетод) = "DELETE" Тогда
			Результат  = Соединение.Удалить(HTTPЗапрос);
		ИначеЕсли ВРег(HTTPМетод) = "HEAD" Тогда
			Результат  = Соединение.ПолучитьЗаголовки(HTTPЗапрос);
		Иначе
			Результат  = Соединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос, ИмяФайлаОтвета);
		КонецЕсли;
	Исключение
		Результат = ОбменСообщениямиССервисами.СформироватьСервисОтвет(, 555, "ERROR", ОписаниеОшибки(),,,, ТекущийМетод);
	КонецПопытки;
	ВремяОтвета = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если ЗначениеЗаполнено(ИмяВремФайлаСертификатаКлиента) Тогда
		Попытка
			УдалитьФайлы(ИмяВремФайлаСертификатаКлиента);
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяВремФайлаСертификатаСервера) Тогда
		Попытка
			УдалитьФайлы(ИмяВремФайлаСертификатаСервера);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если НеСохранятьЛог = Ложь И ЗначениеЗаполнено(ТекущийМетод) И ВключенаЗапись Тогда
		ПараметрыЗаписиСообщения = ОбменСообщениямиССервисами.ПолучитьСтруктуруПараметровДляЗаписиСообщенийОбмена(Результат,
			ТекущийМетод,, id, ИдентификаторСообщения, Истина, КодировкаТекстаТела, Соединение, HTTPМетод,
			ПараметрыЗаписиИсходящегоСообщения.АдресРесурса, ПараметрыURL, ОтветСохранятьКакДвоичныеДанные);
		//Если ТранзакцияАктивна() Тогда
		//	мПараметров = Новый Массив(1);
		//	мПараметров[0] = ПараметрыЗаписиСообщения;
		//	ФоновыеЗадания.Выполнить("ОбменСообщениямиССервисами.ЗаписатьСообщениеОбмена", мПараметров,,
		//		СтрШаблон(НСтр("ru='Запись входящего сообщения обмена по %1'"), ТекущийМетод));
		//Иначе
			ОбменСообщениямиССервисами.ЗаписатьСообщениеОбмена(ПараметрыЗаписиСообщения);
		//КонецЕсли;
	КонецЕсли;
	
	Если АвторизацияЧерез <> Неопределено И (Результат.КодСостояния = 401 Или Результат.КодСостояния = 403) Тогда
		
		ОбменСообщениямиССервисами.ДобавитьАвторизациюВЗаголовки(Заголовки, АвторизацияЧерез, Истина); 
		Результат = ОбменСообщениямиССервисами.ОтправитьЗапросHTTP(ИмяСервера, АдресРесурса, Заголовки, ТекущийМетод, Тело,
			Таймаут, ИспользоватьHTTPS, HTTPМетод, СпособУстановкиТела, ПараметрыURL, Порт, СертификатКлиента, СертификатСервера,
			Пользователь, Пароль, ИмяФайлаОтвета, ПереотправлятьПриОшибке, ПараметрыЗаписиИсходящегоСообщения,, id,
			КодировкаТекстаТела,ИспользоватьBOMТела, ОтправлятьЛогПриНеудаче, ДобавлятьИдентификаторЗапроса,
			ОтветСохранятьКакДвоичныеДанные, НеСохранятьЛог, ОтправитьЧерезРСОчередь, ОтправлятьМетрику);
		Возврат Результат;
		
	ИначеЕсли ПереотправлятьПриОшибке И (Результат.КодСостояния > 299 Или Результат.КодСостояния < 200) Тогда
		
		ПараметрыСервера = ОбменСообщениямиССервисами.ПреобразоватьДанныеВ_JSON(Новый Структура(
			"Сервер, Порт, Таймаут, ЗащищенноеСоединение, Метод, Пользователь, Пароль, АвторизацияЧерез, HTTPМетод, " +
			"ОтветСохранятьКакДвоичныеДанные, НеСохранятьЛог, ОтправлятьМетрику", 
			ИмяСервера, Порт, Таймаут, ИспользоватьHTTPS, АдресРесурса, Пользователь, Пароль, АвторизацияЧерез, HTTPМетод,
			ОтветСохранятьКакДвоичныеДанные, НеСохранятьЛог, ОтправлятьМетрику));
										
		ПараметрыЗаписиИсходящегоСообщения.Вставить("Параметры", ПараметрыСервера);
		Если Не ЗначениеЗаполнено(ПараметрыЗаписиИсходящегоСообщения.ИдентификаторСообщения) Тогда
			ПараметрыЗаписиИсходящегоСообщения.Вставить("ИдентификаторСообщения",  ПараметрыЗаписиИсходящегоСообщения.ВремяСобытия);
		КонецЕсли;
		
		ОбменСообщениямиССервисами.ЗаписатьВОчередьАсинхронныхСообщенийОбмена(ПараметрыЗаписиИсходящегоСообщения);
	КонецЕсли;
	
	Если (Результат.КодСостояния < 200 Или Результат.КодСостояния > 299) И ЗначениеЗаполнено(ТекущийМетод) И ОтправлятьЛогПриНеудаче Тогда
		РаботаС_Sentry.ОтправитьЛогПоВнешнемуAPI(ПараметрыЗаписиИсходящегоСообщения, ПараметрыЗаписиСообщения, Результат);
	КонецЕсли;
	
	Если ОтправлятьМетрику = Истина Тогда
		ОбменСообщениямиССервисами.ОтправитьМетрикиПоHTTPСервисамВГрафану(Соединение.Сервер, АдресРесурсаДо, ТекущийМетод,
			Соединение.Порт, HTTPМетод, Результат.КодСостояния, ВремяЗапроса, ВремяОтвета,, id);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьАвторизациюВЗаголовки(Заголовки, АвторизацияЧерез, Перезапросить = Ложь) Экспорт
	
	Если Заголовки.Получить("Authorization") <> Неопределено И Не Перезапросить Тогда
		Возврат;
	КонецЕсли;
	
	Если ВРег(АвторизацияЧерез) = ВРег("Keycloak") Тогда
		Заголовки.Вставить("Authorization", вбИнтеграцияЗащищенный.ПолучитьТокенЧерезKeycloak(Перезапросить));
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИмяСервераПоТекущейЗоне(ИмяСервера) Экспорт
	
	Если ИмяСервера = "dec" Тогда
		Если ОбщегоНазначенияКлиентСерверПовтИсп.ЭтоРабочаяБаза() Тогда
			ИмяСервера = СтрШаблон("%1.prod.webbankir.com", ИмяСервера); //.prod.wb
		ИначеЕсли ОбщегоНазначенияКлиентСерверПовтИсп.ЭтоТестоваяБаза() Тогда
			ИмяСервера = СтрШаблон("%1.test.webbankir.com", ИмяСервера);
		Иначе
			ИмяСервера = СтрШаблон("%1.dev.webbankir.com", ИмяСервера);
		КонецЕсли;
	Иначе
		ИмяСервера = СтрШаблон("%1.service.consul", ИмяСервера);
	КонецЕсли;
	
	Возврат ИмяСервера;
	
КонецФункции

Функция ОтправитьСообщениеВОчередьAMQP(Обменник, routing_key, ТелоСообщения, ПрерыватьПриОшибке = Истина, Таймаут = 10,
	type = Неопределено, priority = Неопределено, deliveryMode = Неопределено, id = 0, Обменник1С = Истина) Экспорт
	
	WBRequestId = Строка(Новый УникальныйИдентификатор);
	
	СтруктураТела = Новый Структура;
	ЗаголовкиСообщения = Новый Соответствие;
	ЗаголовкиСообщения.Вставить("WB-Request-Id", WBRequestId);
	СвойстваСообщения = Новый Соответствие;
	СвойстваСообщения.Вставить("headers", ЗаголовкиСообщения);
	СвойстваСообщения.Вставить("contentType", "application/json");
	//СвойстваСообщения.Вставить("userId", "Site");
	СвойстваСообщения.Вставить("messageId", WBRequestId);
	СвойстваСообщения.Вставить("appId", "1C");
	Если Не type = Неопределено Тогда
		СвойстваСообщения.Вставить("type", type);
	КонецЕсли;
	Если Не priority = Неопределено Тогда
		СвойстваСообщения.Вставить("priority", priority);
	КонецЕсли;
	Если Не deliveryMode = Неопределено Тогда
		СвойстваСообщения.Вставить("deliveryMode", deliveryMode);
	КонецЕсли;
	СтруктураТела.Вставить("properties", СвойстваСообщения);
	
	ИспользоватьЗащищенноеСоединение = Ложь;
	ОтправлятьЧерезНовыйДЭК = КодОбщегоНазначения.ПроверитьВключенаЛиДополнительнаяНастройкаПрограммы("Отправлять сообщения AMQP через новый ДЭК");
	Если ОтправлятьЧерезНовыйДЭК Тогда
		ИспользоватьЗащищенноеСоединение = Истина;
		ИмяСервера = ОбменСообщениямиССервисами.ПолучитьИмяСервераПоТекущейЗоне("dec");
		Пользователь = Неопределено;
		Пароль = Неопределено;
		АвторизацияЧерез = "ДЭК";
		АдресРесурса = "amqp-bridge";
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Заголовки.Вставить("WB-Request-Id", WBRequestId);
		СтруктураТела.Вставить("routingKey", routing_key);
		СтруктураТела.Вставить("body", ТелоСообщения);
		СтруктураТела.Вставить("exchange", ?(Обменник1С, СтрШаблон("1c.%1", Обменник), Обменник));
	Иначе
		ИмяСервера = ОбменСообщениямиССервисами.ПолучитьИмяСервераПоТекущейЗоне("rabbitmq");
		АвторизацияЧерез = Неопределено;
		Пользователь = "site";
		Если ОбщегоНазначенияКлиентСерверПовтИсп.ЭтоРабочаяБаза() Тогда
			Пароль = "CGbwHArnQ8uzK6db";
		Иначе
			Пароль = "123123123";
		КонецЕсли;
		АдресРесурса = "/api/exchanges/%2F/1c." + Обменник + "/publish";
		СтрокаДанных = ОбменСообщениямиССервисами.ПреобразоватьДанныеВ_JSON(ТелоСообщения, Истина);
		Заголовки = Неопределено;
		СтруктураТела.Вставить("routing_key", routing_key);
		СтруктураТела.Вставить("payload", СтрокаДанных);
		СтруктураТела.Вставить("payload_encoding", "string");
	КонецЕсли;
	
	СтрокаJSON = ОбменСообщениямиССервисами.ПреобразоватьДанныеВ_JSON(СтруктураТела, Истина);
	
	ПараметрыЗаписиИсходящегоСообщения = Неопределено;
	Ответ = ОбменСообщениямиССервисами.ОтправитьЗапросHTTP(ИмяСервера, АдресРесурса, Заголовки, routing_key, СтрокаJSON,
		Таймаут, ИспользоватьЗащищенноеСоединение,,,,,,, Пользователь, Пароль,,
		Не ПрерыватьПриОшибке, ПараметрыЗаписиИсходящегоСообщения, АвторизацияЧерез, id);
	
	Если ПрерыватьПриОшибке = Истина И Ответ.КодСостояния > 299 Или Ответ.КодСостояния < 200 Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='При отправке сообщения в кролика произошла ошибка: %1'"),
			Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ОтправитьОтложенноеСообщениеВОчередьAMQP(routing_key, ТелоСообщения, ДатаДоставки,
	ПрерыватьПриОшибке = Истина, Таймаут = 10, id = 0) Экспорт
	
	WBRequestId = Строка(Новый УникальныйИдентификатор);
	
	СтруктураТела = Новый Структура;
	ЗаголовкиСообщения = Новый Соответствие;
	ЗаголовкиСообщения.Вставить("WB-Request-Id", WBRequestId);
	СвойстваСообщения = Новый Соответствие;
	СвойстваСообщения.Вставить("headers", ЗаголовкиСообщения);
	СвойстваСообщения.Вставить("contentType", "application/json");
	//СвойстваСообщения.Вставить("userId", "Site");
	СвойстваСообщения.Вставить("messageId", WBRequestId);
	
	СтруктураТела.Вставить("properties", СвойстваСообщения);
	
	ИспользоватьЗащищенноеСоединение = Ложь;
	ОтправлятьЧерезНовыйДЭК = КодОбщегоНазначения.ПроверитьВключенаЛиДополнительнаяНастройкаПрограммы("Отправлять сообщения AMQP через новый ДЭК");
	Если ОтправлятьЧерезНовыйДЭК Тогда
		ИспользоватьЗащищенноеСоединение = Истина;
		ИмяСервера = ОбменСообщениямиССервисами.ПолучитьИмяСервераПоТекущейЗоне("dec");
		Пользователь = Неопределено;
		Пароль = Неопределено;
		АвторизацияЧерез = "ДЭК";
		АдресРесурса = "amqp-bridge/delayed-message";
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Заголовки.Вставить("WB-Request-Id", WBRequestId);
		СтруктураТела.Вставить("routingKey", routing_key);
		СтруктураТела.Вставить("body", ТелоСообщения);
		СтруктураТела.Вставить("fireAt", КодОбщегоНазначения.ПреобразоватьДатуКСтроке(ДатаДоставки));
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаJSON = ОбменСообщениямиССервисами.ПреобразоватьДанныеВ_JSON(СтруктураТела, Истина);
	
	ПараметрыЗаписиИсходящегоСообщения = Неопределено;
	Ответ = ОбменСообщениямиССервисами.ОтправитьЗапросHTTP(ИмяСервера, АдресРесурса, Заголовки, routing_key, СтрокаJSON,
		Таймаут, ИспользоватьЗащищенноеСоединение,,,,,,, Пользователь, Пароль,, Не ПрерыватьПриОшибке,
		ПараметрыЗаписиИсходящегоСообщения, АвторизацияЧерез, id);
	
	Если ПрерыватьПриОшибке = Истина И Ответ.КодСостояния > 299 Или Ответ.КодСостояния < 200 Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='При отправке сообщения в кролика произошла ошибка: %1'"),
			Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции





#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Разделяет полный адрес ресурса сервиса на составляющие части для дальнейшего подключения
//
// Параметры:
//  АдресСервиса  - Строка - Полный адрес ресурса сервиса
//
// Возвращаемое значение:
//   Структура   - Параметры для подключения полученные из входного параметра
//		- ЗащищенноеСоединение - Неопределено, ЗащищенноеСоединениеOpenSSL - Необходимость установки защищенного соединения
//		- АдресСервера - Строка - Адрес хоста, где опубликован сервис
//		- АдресРесурса - Строка - Адрес ресурса (метода), который необходимо будет вызвать у данного сервиса
//		- Порт - Число - Порт для подключения
//
Функция ПолучитьСоставляющиеАдресаСервиса(АдресСервиса) Экспорт
	
	СтруктураРезультата = Новый Структура;
	
	Если СтрНайти(АдресСервиса, "https://") <> 0 Тогда
		СтруктураРезультата.Вставить("ЗащищенноеСоединение", Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено));
		АдресСервиса = СтрЗаменить(АдресСервиса, "https://", "");
		ПортПоУмолчанию = 443;
	Иначе
		СтруктураРезультата.Вставить("ЗащищенноеСоединение", Неопределено);
		АдресСервиса = СтрЗаменить(АдресСервиса, "http://", "");
		ПортПоУмолчанию = 80;
	КонецЕсли;
	НомерРазделения = СтрНайти(АдресСервиса, "/");
	
	СтруктураРезультата.Вставить("АдресСервера", ?(НомерРазделения = 0, АдресСервиса, Лев(АдресСервиса, НомерРазделения - 1)));
	СтруктураРезультата.Вставить("АдресРесурса", ?(НомерРазделения = 0, "", Сред(АдресСервиса, НомерРазделения + 1)));
	
	ПозицияПорта = СтрНайти(СтруктураРезультата.АдресСервера, ":");
	Попытка
		СтруктураРезультата.Вставить("Порт", ?(ПозицияПорта = 0, ПортПоУмолчанию,
			Число(Сред(СтруктураРезультата.АдресСервера, ПозицияПорта + 1))));
	Исключение
		СтруктураРезультата.Вставить("Порт", ПортПоУмолчанию);
	КонецПопытки;
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Подготавливает структуру параметров для записи лога обмена в РС СообщенияОбменаСервисов
//
// Параметры:
//  ЗапросИлиОтвет  - Неопределено, HTTPСервисОтвет, HTTPСервисЗапрос, HTTPОтвет, HTTPЗапрос -
//		Можно передать http запрос или ответ для заполнения параметров: Заголовки, Параметры, Тело, КодСостояния.
//		Иначе придется их заполнять самим.
//  Метод  - СправочникСсылка.МетодыОбменаСообщениями - Метод сервиса по которому происходит запрос или ответ.
//  Входящий  - Булево - Признак, поясняющий направление потока сообщений по отношению к текущей ИБ. По умолчанию Истина.
//  id  - Число - Идентификатор объекта по которому происходит обмен.
//  ИдентификаторСообщения  - Число, Строка - Идентификатор сообщения для удобного поиска сообщения.
//		Также обязательно применяется для асинхронного обмена.
//	ПереноситьСтроки - Булево - Необходимо строку JSON получить с переносом строк (для удобного чтения) или нет.
//
// Возвращаемое значение:
//   Структура   - Структура параметров для записи лога обмена с сервисами:
//			- ИдентификаторСообщения - Число, Строка - Переданный идентификатор сообщения
//			- Метод - СправочникСсылка.МетодыОбменаСообщениями - Переданный метод сервиса
//			- Направление - ПеречислениеСсылка.ТипНаправленияСообщенияОбменаСервиса -
//				направление обмена (входящий или исходящий запрос)
//			- id - Число - Переданный id
//			- Заголовки - Строка - Преобразованный в json заголовки из параметра ЗапросИлиОтвет
//			- Параметры - Строка - Преобразованный в json параметры запроса из параметра ЗапросИлиОтвет
//			- Тело - Строка - Преобразованный в json тело из параметра ЗапросИлиОтвет
//			- КодСостояния - Число - Код состояния из параметра ЗапросИлиОтвет
//
Функция ПолучитьСтруктуруПараметровДляЗаписиСообщенийОбмена(ЗапросИлиОтвет = Неопределено, Метод = Неопределено,
	Входящий = Истина, id = 0, ИдентификаторСообщения = 0, ПереноситьСтроки = Ложь, Кодировка = Неопределено,
	Соединение = Неопределено, HTTPМетод = "POST", АдресРесурса = "", ПараметрыURL = Неопределено,
	ОтветСохранятьКакДвоичныеДанные = Ложь) Экспорт
	
	ДатаСобытия = ТекущаяДатаСеанса();
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИдентификаторСообщения", ИдентификаторСообщения);
	СтруктураПараметров.Вставить("Метод", Метод);
	СтруктураПараметров.Вставить("Направление", ?(Входящий,
		ПредопределенноеЗначение("Перечисление.ТипНаправленияСообщенияОбменаСервиса.Входящий"),
		ПредопределенноеЗначение("Перечисление.ТипНаправленияСообщенияОбменаСервиса.Исходящий")));
	СтруктураПараметров.Вставить("id", id);
	СтруктураПараметров.Вставить("Заголовки", "");
	СтруктураПараметров.Вставить("Параметры", "");
	СтруктураПараметров.Вставить("Тело", "");
	СтруктураПараметров.Вставить("КодСостояния", 200);
	ВремяСобытия = ТекущаяУниверсальнаяДатаВМиллисекундах();
	СтруктураПараметров.Вставить("ВремяСобытия", ВремяСобытия);
	НомерСеанса = ПолучитьТекущийСеансИнформационнойБазы().НомерСеанса;
	СтруктураПараметров.Вставить("НомерСеанса", НомерСеанса);
	СтруктураПараметров.Вставить("ДатаСобытия", ДатаСобытия);
	СтруктураПараметров.Вставить("ДеньСобытия", НачалоДня(ДатаСобытия));
	
	ПараметрыСообщения = Новый Структура;
	
	Если Не ЗначениеЗаполнено(HTTPМетод) Тогда
		HTTPМетод = "POST";
	КонецЕсли;
	
	Если ЗапросИлиОтвет <> Неопределено Тогда
		СтруктураПараметров.Вставить("Заголовки", ПреобразоватьДанныеВ_JSON(ЗапросИлиОтвет.Заголовки, ПереноситьСтроки));
		Если ТипЗнч(ЗапросИлиОтвет) = Тип("HTTPСервисОтвет") Тогда
			СтруктураПараметров.Вставить("КодСостояния", ЗапросИлиОтвет.КодСостояния);
			Если ОтветСохранятьКакДвоичныеДанные = Истина Тогда
				Тело = Base64Строка(ЗапросИлиОтвет.ПолучитьТелоКакДвоичныеДанные());
			Иначе
				Тело = ЗапросИлиОтвет.ПолучитьТелоКакСтроку();
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЗапросИлиОтвет) = Тип("HTTPОтвет") Тогда
			СтруктураПараметров.Вставить("КодСостояния", ЗапросИлиОтвет.КодСостояния);
			Если ОтветСохранятьКакДвоичныеДанные = Истина Тогда
				Тело = Base64Строка(ЗапросИлиОтвет.ПолучитьТелоКакДвоичныеДанные());
			ИначеЕсли Кодировка = Неопределено Тогда
				Тело = ЗапросИлиОтвет.ПолучитьТелоКакСтроку();
			Иначе
				Тело = ЗапросИлиОтвет.ПолучитьТелоКакСтроку(Кодировка);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЗапросИлиОтвет) = Тип("HTTPСервисЗапрос") Тогда
			ПараметрыСообщения.Вставить("Параметры", ЗапросИлиОтвет.ПараметрыЗапроса);
			//СтруктураПараметров.Вставить("Параметры", ПреобразоватьДанныеВ_JSON(ЗапросИлиОтвет.ПараметрыЗапроса));
			Если Кодировка = Неопределено Тогда
				Тело = ЗапросИлиОтвет.ПолучитьТелоКакСтроку();
			Иначе
				Тело = ЗапросИлиОтвет.ПолучитьТелоКакСтроку(Кодировка);
			КонецЕсли;
			АдресРесурса = ЗапросИлиОтвет.БазовыйURL;
			HTTPМетод = ЗапросИлиОтвет.HTTPМетод;
		Иначе
			Если Кодировка = Неопределено Или Кодировка = "UTF-8" Или Кодировка = КодировкаТекста.UTF8 Тогда
				Тело = ЗапросИлиОтвет.ПолучитьТелоКакСтроку();
			Иначе
				Тело = ПолучитьСтрокуИзДвоичныхДанных(ЗапросИлиОтвет.ПолучитьТелоКакДвоичныеДанные(), Кодировка);
			КонецЕсли;
			АдресРесурса = ЗапросИлиОтвет.АдресРесурса;
		КонецЕсли;
		СтруктураПараметров.Вставить("Тело", ПреобразоватьДанныеВ_JSON(Тело, ПереноситьСтроки));
	КонецЕсли;
	
	Если Соединение <> Неопределено Тогда
		ПараметрыСообщения.Вставить("Сервер", Соединение.Сервер);
		ПараметрыСообщения.Вставить("Порт", Соединение.Порт);
		ПараметрыСообщения.Вставить("Таймаут", Соединение.Таймаут);
		ПараметрыСообщения.Вставить("ЗащищенноеСоединение", ?(Соединение.ЗащищенноеСоединение <> Неопределено, Истина, Ложь));
		ПараметрыСообщения.Вставить("Метод", АдресРесурса);
		ПараметрыСообщения.Вставить("HTTPМетод", HTTPМетод);
		ПараметрыСообщения.Вставить("ПараметрыURL", ПараметрыURL);
	КонецЕсли;
	
	//ПараметрыСообщения.Вставить("СообщенияПользователю", КодОбщегоНазначения.ПолучитьТекстомСообщенияПользователю());
	
	СтруктураПараметров.Вставить("Параметры", ОбменСообщениямиССервисами.ПреобразоватьДанныеВ_JSON(ПараметрыСообщения, Истина));
	СтруктураПараметров.Вставить("АдресРесурса", АдресРесурса);
	СтруктураПараметров.Вставить("HTTPМетод", HTTPМетод);
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПолучитьСтруктуруПараметровДляЗаписиОчередиСообщенийОбмена(Соединение, Запрос, Метод,
	ИдентификаторСообщения = Неопределено, id = 0, HTTPМетод = "POST") Экспорт
	
	ПараметрыСервера = ОбменСообщениямиССервисами.ПреобразоватьДанныеВ_JSON(
		Новый Структура("Сервер, Порт, Таймаут, ЗащищенноеСоединение, АдресРесурса, Пользователь, Пароль, HTTPМетод", 
		Соединение.Сервер, Соединение.Порт, Соединение.Таймаут,
		?(Соединение.ЗащищенноеСоединение <> Неопределено, Истина, Ложь), Запрос.АдресРесурса,
		Соединение.Пользователь, Соединение.Пароль, HTTPМетод));
		
	Если ИдентификаторСообщения = Неопределено Тогда
		ИдентификаторСообщения = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	ПараметрыЗаписиСообщения = Новый Структура;
	ПараметрыЗаписиСообщения.Вставить("Параметры", ПараметрыСервера);
	ПараметрыЗаписиСообщения.Вставить("ИдентификаторСообщения",  ИдентификаторСообщения);
	ПараметрыЗаписиСообщения.Вставить("Заголовки", ПреобразоватьДанныеВ_JSON(Запрос.Заголовки, Истина));
	ПараметрыЗаписиСообщения.Вставить("Тело", ПреобразоватьДанныеВ_JSON(Запрос.ПолучитьТелоКакСтроку(), Истина));
	ПараметрыЗаписиСообщения.Вставить("Метод", Метод);
	ПараметрыЗаписиСообщения.Вставить("HTTPМетод", HTTPМетод);
	ПараметрыЗаписиСообщения.Вставить("Направление", ПредопределенноеЗначение("Перечисление.ТипНаправленияСообщенияОбменаСервиса.Исходящий"));
	ПараметрыЗаписиСообщения.Вставить("id", id);
	
	Возврат ПараметрыЗаписиСообщения;
	
КонецФункции

// Преобразовывает в JSON переданное значение
//
// Параметры:
//  ДанныеПреобразования  - Строка, Массив, Структура, Соответствие -
//		данные, которые нужно преобразовать в JSON
//		если передали строку, то она считается уже преобразованной в json и возвращается в ответ,
//		кроме случая, если она состоит из одной строки, то такая строка перепрочитывается
//		из json и обратно для более наглядного представления с переносами строк
//	ПереноситьСтроки - Булево - Необходимо строку JSON получить с переносом строк (для удобного чтения) или нет.
//
// Возвращаемое значение:
//   Строка   - JSON строка
//
Функция ПреобразоватьДанныеВ_JSON(ДанныеПреобразования, ПереноситьСтроки = Ложь) Экспорт
	
	Если ДанныеПреобразования = Неопределено Или ПустаяСтрока(ДанныеПреобразования) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(ДанныеПреобразования) = Тип("Строка") Тогда
		Если ПустаяСтрока(ДанныеПреобразования) Тогда
			Возврат "";
		ИначеЕсли СтрЧислоСтрок(ДанныеПреобразования) > 1 Или Не ПереноситьСтроки Тогда
			Возврат ДанныеПреобразования;
		КонецЕсли;
		Если СтрНайти("{[", Лев(ДанныеПреобразования, 1)) = 0 Тогда // если не json строка
			Возврат ДанныеПреобразования;
		КонецЕсли;
		ДанныеЗапроса = ПрочитатьJSONвДанные(ДанныеПреобразования); // для удобного чтения перезапишем json через 1с
		Если ДанныеЗапроса = Неопределено Тогда
			Возврат ДанныеПреобразования; // если не удалось преобразовать строку в json, то вернем её же
		КонецЕсли;
	Иначе
		ДанныеЗапроса = ДанныеПреобразования;
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(
		?(ПереноситьСтроки, ПереносСтрокJSON.Авто, ПереносСтрокJSON.Нет), " ", Истина,,,,,Истина,));
	ЗаписатьJSON(ЗаписьJSON, ДанныеЗапроса);
	ДанныеСтрокой = ЗаписьJSON.Закрыть();
	
	Возврат ДанныеСтрокой;
	
КонецФункции

// Получает значение записанное в JSON
//
// Параметры:
//  СтрокаJSON  - Строка - JSON строка, значение из которой нужно получить
//  УдалитьПлюс  - Булево - нужно ли удалять знак "+" перед чтением JSON
//
// Возвращаемое значение:
//   Массив, Структура, Соответствие   - значение, прочитанное из переданого текста JSON
//
//Функция ПрочитатьJSONвДанные(СтрокаJSON, УдалитьПлюс = Истина) Экспорт //-- WB-7660
Функция ПрочитатьJSONвДанные(Знач СтрокаJSON, УдалитьПлюс = Ложь, ПрочитатьВСоответствие = Ложь, РаскодироватьСтроку = Ложь, ИменаСвойствСоЗначениямиДата = "") Экспорт
	
	Если РаскодироватьСтроку = Истина Тогда
		СтрокаJSON = РаскодироватьСтроку(СтрокаJSON, СпособКодированияСтроки.КодировкаURL);
	КонецЕсли;
	Если УдалитьПлюс = Истина Тогда
		СтрокаJSON = СтрЗаменить(СтрокаJSON, "+", " ");
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаJSON) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
		ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие, ИменаСвойствСоЗначениямиДата);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ДанныеЗапроса;
	
КонецФункции

// Регламентное задание для очистки лога сообщений обмена сервисов по истечению срока хранения
//
Процедура ОчисткаСообщенийОбменаПоИстечениюСрокаХранения() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МетодыОбменаСообщениями.Ссылка КАК Метод,
		|	ВЫБОР
		|		КОГДА МетодыОбменаСообщениями.ПометкаУдаления
		|			ТОГДА &НачалоЗавтрашнегоДня
		|		КОГДА МетодыОбменаСообщениями.ХранитьНеБолееДней = 0
		|			ТОГДА ДОБАВИТЬКДАТЕ(&НачалоЗавтрашнегоДня, ДЕНЬ, -ЕСТЬNULL(МетодыОбменаСообщениями.Родитель.ХранитьНеБолееДней, 0))
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(&НачалоЗавтрашнегоДня, ДЕНЬ, -МетодыОбменаСообщениями.ХранитьНеБолееДней)
		|	КОНЕЦ КАК УдалятьЗаписиРанееДаты,
		|	ВЫБОР
		|		КОГДА МетодыОбменаСообщениями.ПометкаУдаления
		|			ТОГДА &НачалоЗавтрашнегоДняВМиллисекундах
		|		КОГДА МетодыОбменаСообщениями.ХранитьНеБолееДней = 0
		|			ТОГДА &НачалоЗавтрашнегоДняВМиллисекундах - ЕСТЬNULL(МетодыОбменаСообщениями.Родитель.ХранитьНеБолееДней, 0) * 1000 * 60 * 60 * 24
		|		ИНАЧЕ &НачалоЗавтрашнегоДняВМиллисекундах - МетодыОбменаСообщениями.ХранитьНеБолееДней * 1000 * 60 * 60 * 24
		|	КОНЕЦ КАК УдалятьЗаписиРанееВремениСобытия
		|ПОМЕСТИТЬ НастройкиОчисткиДанных
		|ИЗ
		|	Справочник.МетодыОбменаСообщениями КАК МетодыОбменаСообщениями
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СообщенияОбменаСервисов.Метод КАК Метод,
		|	СообщенияОбменаСервисов.ДеньСобытия КАК ДеньСобытия
		|ИЗ
		|	НастройкиОчисткиДанных КАК НастройкиОчисткиДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СообщенияОбменаСервисов КАК СообщенияОбменаСервисов
		|		ПО НастройкиОчисткиДанных.Метод = СообщенияОбменаСервисов.Метод
		|			И НастройкиОчисткиДанных.УдалятьЗаписиРанееДаты > СообщенияОбменаСервисов.ДеньСобытия
		|			И НастройкиОчисткиДанных.УдалятьЗаписиРанееВремениСобытия > СообщенияОбменаСервисов.ВремяСобытия";
	
	НачалоЗавтрашнегоДня = КонецДня(ТекущаяДата()) + 1;
	Запрос.УстановитьПараметр("НачалоЗавтрашнегоДня", НачалоЗавтрашнегоДня);
	
	ВремяМиллисекунд = (УниверсальноеВремя(НачалоЗавтрашнегоДня) - Дата(1,1,1)) * 1000;
	Запрос.УстановитьПараметр("НачалоЗавтрашнегоДняВМиллисекундах", ВремяМиллисекунд);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	НаборЗаписей = РегистрыСведений.СообщенияОбменаСервисов.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.Отбор.Метод.Установить(Выборка.Метод);
		НаборЗаписей.Отбор.ДеньСобытия.Установить(Выборка.ДеньСобытия);
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(НСтр("ru='Не удалось очистить сообщения по методу %1 за %2 день по причине %3'"),
				Выборка.Метод, Выборка.ДеньСобытия, ОписаниеОшибки()));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМетодОбменаСообщениямиПоКоду(КодМетода, НужноСоздать = Ложь, ХранитьНеБолее = 3) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Код = Лев(КодМетода, 50);
	НайденныйМетод = Справочники.МетодыОбменаСообщениями.НайтиПоКоду(Код);
	Если ЗначениеЗаполнено(НайденныйМетод) Или Не НужноСоздать Тогда
		Возврат НайденныйМетод;
	КонецЕсли;
	
	НовыйМетод = Справочники.МетодыОбменаСообщениями.СоздатьЭлемент();
	НовыйМетод.Код = Код;
	НовыйМетод.Наименование = КодМетода;
	НовыйМетод.ХранитьНеБолееДней = ХранитьНеБолее;
	
	Попытка
		НовыйМетод.Записать();
		Возврат НовыйМетод.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(НСтр("ru='Не удалось записать %1 по причине %2'"), НовыйМетод.Ссылка, ОписаниеОшибки()), НовыйМетод.Ссылка);
		Возврат Неопределено;
	КонецПопытки;
		
КонецФункции

Процедура ПолучитьМетодОбменаСообщениями(ИмяСервера, АдресРесурса, ТекущийМетод = "",
	Таймаут = 60, ИспользоватьHTTPS = Ложь, HTTPМетод = "POST", Порт = Неопределено, СертификатКлиента = Неопределено,
	СертификатСервера = Неопределено, Пользователь = Неопределено, Пароль = Неопределено, ПереотправлятьПриОшибке = Ложь,
	АвторизацияЧерез = Неопределено, КодировкаТекстаТела = "UTF-8", ОтправлятьЛогПриНеудаче = Истина,
	ДобавлятьИдентификаторЗапроса = Истина, ОтветСохранятьКакДвоичныеДанные = Ложь, НеСохранятьЛог = Ложь,
	ОтправитьЧерезРСОчередь = Ложь, ОтправлятьМетрику = Истина, ИмяВремФайлаСертификатаКлиента = Неопределено,
	ИмяВремФайлаСертификатаСервера = Неопределено) Экспорт
		
	Если ТекущийМетод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
	
		НастройкиМетода = КодОбщегоНазначенияПовтИсп.ПолучитьМетодОбменаСообщениями(ТекущийМетод);
		МетодИзНастройки = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Метод");
		
		НастройкаСоединения = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Бой_НастройкаСоединения");
		Если Не ЗначениеЗаполнено(НастройкаСоединения) Тогда
			СтруктураНастройкиСоединения = КодОбщегоНазначенияПовтИсп.ПолучитьНастройкуСоединениеС_СетевымиСлужбами(ИмяСервера);
			НастройкаСоединения = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(СтруктураНастройкиСоединения, "Бой_НастройкаСоединения");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НастройкаСоединения) Тогда
			Попытка
				НастройкаСоединения = Справочники.НастройкиСоединенияС_СетевымиСлужбами.СоздатьНастройкуСоединениеС_СетевымиСлужбами(
					ИмяСервера,, Таймаут, ИспользоватьHTTPS, Порт, СертификатКлиента, СертификатСервера,
					Пользователь, Пароль);
			Исключение
				РаботаС_Sentry.ОтправитьЛогПоИсключению(ИнформацияОбОшибке(),,, "ПолучитьМетодОбменаСообщениями");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр(
					"ru='Не удалось записать настройки соединения с сетевыми службами по причине: %1'"), ОписаниеОшибки()));
				СтруктураНастройкиСоединения = КодОбщегоНазначенияПовтИсп.ПолучитьНастройкуСоединениеС_СетевымиСлужбами(ИмяСервера);
				НастройкаСоединения = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(СтруктураНастройкиСоединения, "Бой_НастройкаСоединения");
			КонецПопытки;
		КонецЕсли;
		
		АдресРесурсаИзНастройки = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "АдресРесурса");
		Если Не ЗначениеЗаполнено(МетодИзНастройки) Тогда
			Попытка
				МетодИзНастройки = Справочники.МетодыОбменаСообщениями.СоздатьМетодОбменаСообщениями(ТекущийМетод,
					НастройкаСоединения, АдресРесурса, Таймаут, HTTPМетод, ПереотправлятьПриОшибке, АвторизацияЧерез,
					КодировкаТекстаТела, ОтправлятьЛогПриНеудаче, ДобавлятьИдентификаторЗапроса, ОтветСохранятьКакДвоичныеДанные,
					НеСохранятьЛог, ОтправитьЧерезРСОчередь, ОтправлятьМетрику);
				НастройкиМетода = КодОбщегоНазначенияПовтИсп.ПолучитьМетодОбменаСообщениями(МетодИзНастройки);
			Исключение
				РаботаС_Sentry.ОтправитьЛогПоИсключению(ИнформацияОбОшибке(),,, "ПолучитьМетодОбменаСообщениями");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр(
					"ru='Не удалось записать метод обмена по причине: %1'"), ОписаниеОшибки()));
				НастройкиМетода = КодОбщегоНазначенияПовтИсп.ПолучитьМетодОбменаСообщениями(ТекущийМетод);
			КонецПопытки;
		ИначеЕсли Не ЗначениеЗаполнено(АдресРесурсаИзНастройки)
			Или Не ЗначениеЗаполнено(КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Бой_НастройкаСоединения")) Тогда
			Попытка
				Справочники.МетодыОбменаСообщениями.ОбновитьМетодОбменаСообщениями(МетодИзНастройки,
					НастройкаСоединения, АдресРесурса, Таймаут, HTTPМетод, ПереотправлятьПриОшибке, АвторизацияЧерез,
					КодировкаТекстаТела, ОтправлятьЛогПриНеудаче, ДобавлятьИдентификаторЗапроса, ОтветСохранятьКакДвоичныеДанные,
					НеСохранятьЛог, ОтправитьЧерезРСОчередь, ОтправлятьМетрику);
				НастройкиМетода = КодОбщегоНазначенияПовтИсп.ПолучитьМетодОбменаСообщениями(МетодИзНастройки);
			Исключение
				РаботаС_Sentry.ОтправитьЛогПоИсключению(ИнформацияОбОшибке(),,, "ПолучитьМетодОбменаСообщениями");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр(
					"ru='Не удалось обновить метод обмена по причине: %1'"), ОписаниеОшибки()));
				НастройкиМетода = КодОбщегоНазначенияПовтИсп.ПолучитьМетодОбменаСообщениями(МетодИзНастройки);
			КонецПопытки;
		КонецЕсли;
		
		МетодИзНастройки = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Метод");
		Если ЗначениеЗаполнено(МетодИзНастройки) Тогда
			ТекущийМетод = МетодИзНастройки;
		Иначе
			Возврат;
		КонецЕсли;
		
		АдресРесурсаИзНастройки = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "АдресРесурса");
		Если ЗначениеЗаполнено(АдресРесурсаИзНастройки) Тогда
			АдресРесурса = АдресРесурсаИзНастройки;
		КонецЕсли;
		
		ТаймаутИзНастройки = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Таймаут");
		Если ЗначениеЗаполнено(ТаймаутИзНастройки) Тогда
			Таймаут = ТаймаутИзНастройки;
		КонецЕсли;
		
		HTTP_МетодИзНастройки = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "HTTP_Метод");
		Если ЗначениеЗаполнено(HTTP_МетодИзНастройки) Тогда
			HTTPМетод = HTTP_МетодИзНастройки;
		КонецЕсли;
		
		АвторизацияЧерез = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "АвторизацияЧерез");	
		КодировкаТекстаТела = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "КодировкаТекстаТела");
		ПереотправлятьПриОшибке = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "ПереотправлятьПриОшибке");
		ОтправлятьЛогПриНеудаче = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "ОтправлятьЛогПриНеудаче");
		НеСохранятьЛог = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "НеСохранятьЛог");
		ОтправитьЧерезРСОчередь = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "ОтправитьЧерезОчередьСообщений");
		ОтправлятьМетрику = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "ОтправлятьМетрику");
		ДобавлятьИдентификаторЗапроса = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "ДобавлятьИдентификаторЗапроса");
		ОтветСохранятьКакДвоичныеДанные = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "ОтветСохранятьКакДвоичныеДанные");
		
		Если ОбщегоНазначенияКлиентСерверПовтИсп.ЭтоРабочаяБаза()
			Или КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Бой_ИспользоватьВоВсехЗонах") = Истина Тогда
			НастройкаСоединения = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Бой_НастройкаСоединения");
			ИмяСервера = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Бой_АдресСервиса");
			ИспользоватьHTTPS = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Бой_ИспользоватьЗащищенноеСоединение");
			Порт = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Бой_Порт");
			ТаймаутИзНастройкиСервера = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Бой_Таймаут");
			ФайлСертификатКлиента = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Бой_СертификатКлиента");
			ФайлСертификатСервера = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Бой_СертификатСервера");
			ПутьКФайлуСертификатаКлиента = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Бой_ПутьКФайлуСертификатаКлиента");
			ПутьКФайлуСертификатаСервера = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Бой_ПутьКФайлуСертификатаСервера");
		ИначеЕсли ОбщегоНазначенияКлиентСерверПовтИсп.ЭтоТестоваяБаза() Тогда
			НастройкаСоединения = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Тест_НастройкаСоединения");
			ИмяСервера = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Тест_АдресСервиса");
			ИспользоватьHTTPS = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Тест_ИспользоватьЗащищенноеСоединение");
			Порт = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Тест_Порт");
			ТаймаутИзНастройкиСервера = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Тест_Таймаут");
			ФайлСертификатКлиента = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Тест_СертификатКлиента");
			ФайлСертификатСервера = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Тест_СертификатСервера");
			ПутьКФайлуСертификатаКлиента = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Тест_ПутьКФайлуСертификатаКлиента");
			ПутьКФайлуСертификатаСервера = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Тест_ПутьКФайлуСертификатаСервера");
		Иначе
			НастройкаСоединения = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Дев_НастройкаСоединения");
			ИмяСервера = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Дев_АдресСервиса");
			ИспользоватьHTTPS = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Дев_ИспользоватьЗащищенноеСоединение");
			Порт = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Дев_Порт");
			ТаймаутИзНастройкиСервера = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Дев_Таймаут");
			ФайлСертификатКлиента = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Дев_СертификатКлиента");
			ФайлСертификатСервера = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Дев_СертификатСервера");
			ПутьКФайлуСертификатаКлиента = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Дев_ПутьКФайлуСертификатаКлиента");
			ПутьКФайлуСертификатаСервера = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(НастройкиМетода, "Дев_ПутьКФайлуСертификатаСервера");
		КонецЕсли;
		
		ИмяВремФайлаСертификатаКлиента = Неопределено;
		Если ЗначениеЗаполнено(ФайлСертификатКлиента) И ЗначениеЗаполнено(ПутьКФайлуСертификатаКлиента) Тогда
			СтруктураПароляНаСерт = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ФайлСертификатКлиента, "Пароль");
			СертификатКлиента = Новый СертификатКлиентаФайл(ПутьКФайлуСертификатаКлиента,
				КодОбщегоНазначения.ПолучитьЭлементСтруктуры(СтруктураПароляНаСерт, "Пароль"));
		ИначеЕсли ЗначениеЗаполнено(ФайлСертификатКлиента) Тогда
			ИмяВремФайлаСертификатаКлиента = ПолучитьИмяВременногоФайла("pfx");
			ддСертификатСервера = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлСертификатКлиента, Ложь);
			ддСертификатСервера.Записать(ИмяВремФайлаСертификатаКлиента);
			СтруктураПароляНаСерт = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ФайлСертификатКлиента, "Пароль");
			СертификатКлиента = Новый СертификатКлиентаФайл(ИмяВремФайлаСертификатаКлиента,
				КодОбщегоНазначения.ПолучитьЭлементСтруктуры(СтруктураПароляНаСерт, "Пароль"));
		Иначе
			СертификатКлиента = Неопределено;
		КонецЕсли;
		ИмяВремФайлаСертификатаСервера = Неопределено;
		Если ЗначениеЗаполнено(ФайлСертификатСервера) И ЗначениеЗаполнено(ПутьКФайлуСертификатаСервера) Тогда
			СтруктураПароляНаСерт = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ФайлСертификатСервера, "Пароль");
			СертификатКлиента = Новый СертификатКлиентаФайл(ПутьКФайлуСертификатаСервера,
				КодОбщегоНазначения.ПолучитьЭлементСтруктуры(СтруктураПароляНаСерт, "Пароль"));
		ИначеЕсли ЗначениеЗаполнено(ФайлСертификатСервера) Тогда
			ИмяВремФайлаСертификатаСервера = ПолучитьИмяВременногоФайла("pfx");
			ддСертификатСервера = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлСертификатСервера, Ложь);
			ддСертификатСервера.Записать(ИмяВремФайлаСертификатаСервера);
			СтруктураПароляНаСерт = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ФайлСертификатСервера, "Пароль");
			СертификатСервера = Новый СертификатыУдостоверяющихЦентровФайл(ИмяВремФайлаСертификатаСервера,
				КодОбщегоНазначения.ПолучитьЭлементСтруктуры(СтруктураПароляНаСерт, "Пароль"));
		Иначе
			СертификатСервера = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НастройкаСоединения) Тогда
			СтруктураАвторизации = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(НастройкаСоединения, "Пользователь, Пароль");
			
			Пользователь = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(СтруктураАвторизации, "Пользователь");
			Пароль = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(СтруктураАвторизации, "Пароль");
		КонецЕсли;
	
	Исключение
		РаботаС_Sentry.ОтправитьЛогПоИсключению(ИнформацияОбОшибке(),,, "ПолучитьМетодОбменаСообщениями");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр(
			"ru='Не удалось прочитать настройки соединения с сетевыми службами по причине: %1'"), ОписаниеОшибки()));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


Функция ОбработатьЗапрос_asynchronousResponse(ПараметрыМетода, Ответ)
	
	Возврат СформироватьСервисОтвет(Ответ, 200);
	
КонецФункции

Функция ОбработатьЗапрос_uploadingChanges(ПараметрыМетода, Ответ, МенеджерСообщения)
	
	data = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(ПараметрыМетода.ДанныеТела, "data");
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(data);

	Чтение.ПерейтиКСодержимому();
	Пока Истина Цикл
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "data" Тогда
			Чтение.Прочитать();
			Продолжить;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "data" Тогда
			Прервать;
		КонецЕсли;
		СчитанныйОбъект = ПрочитатьXML(Чтение);
		СчитанныйОбъект.ОбменДанными.Загрузка = Истина;
		СчитанныйОбъект.Записать();
	КонецЦикла;
	
	Возврат СформироватьСервисОтвет(Ответ, 200);
	
КонецФункции




// Общая точка входа для входящих сообщений по AMQP
//
// Параметры:
//  ПараметрыМетода  - Структура - Параметры, необходимые для выполнения асинхронного запроса:
//			- ИдентификаторСообщения - Число - Идентификатор асинхронного сообщения обмена
//			- Метод - СправочникСсылка.МетодыОбменаСообщениями - Метод по которому необходимо произвести обработку запроса
//			- ЗапрашиваемыйМетод - Строка - имя вызванного метода
//			- id - Число - id объекта обмена
//			- Заголовки - Строка - Преобразованный в json заголовки запроса
//			- ПараметрыЗапроса - Строка - Преобразованный в json параметры запроса
//			- Тело - Строка - Преобразованный в json тело запроса
//			- ДанныеТела - Неопределено, Массив, Структура, Соответствие - данные тела запроса прочитанные из JSON
//			- HTTPМетод - Строка - по какому методу HTTP был послан запрос (GET, POST, ...)
//			- АдресДляОтвета - Строка - Адрес для асинхронного ответа.
//  Ответ  - Структура, HTTPСервисОтвет - Сервис ответ, в который будет помещен результат обработки запроса.
//
// Возвращаемое значение:
//   Структура, HTTPСервисОтвет   - Сервис ответ с результатом обработки запроса.
//
Функция ОбработатьЗапрос_incomingEvent(ПараметрыМетода, Ответ, МенеджерСообщения = Неопределено)
	
	routingKey = ПараметрыМетода.ДанныеТела.Получить("routingKey");
	Если Не МенеджерСообщения = Неопределено И routingKey <> Неопределено Тогда
		ТекущийМетод = ОбменСообщениямиССервисами.ПолучитьМетодОбменаСообщениямиПоКоду(routingKey, Истина); 
		ПараметрыМетода.Метод = ТекущийМетод;
		ПараметрыМетода.ИмяТекущегоМетода = routingKey;
		МенеджерСообщения.Метод = ТекущийМетод;
	КонецЕсли;
	properties = ПараметрыМетода.ДанныеТела.Получить("properties");
	Если properties <> Неопределено И Не МенеджерСообщения = Неопределено Тогда
		headers = properties.Получить("headers");
		Если headers <> Неопределено Тогда
			МенеджерСообщения.ИдентификаторСообщения = headers.Получить("Request-Id");
			ПараметрыМетода.ИдентификаторСообщения = МенеджерСообщения.ИдентификаторСообщения;
		КонецЕсли;
	КонецЕсли;
	
	Если Не МенеджерСообщения = Неопределено Тогда
		id = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(ПараметрыМетода.ДанныеТела, "body.data.id", Тип("Число"));
		Если Не ЗначениеЗаполнено(id) Тогда
			id = КодОбщегоНазначения.ПолучитьЭлементСтруктуры(ПараметрыМетода.ДанныеТела, "body.id", Тип("Число"));
		КонецЕсли;
		Если ЗначениеЗаполнено(id) Тогда
			МенеджерСообщения.id = id;
			ПараметрыМетода.id = id;
			ВключенаЗапись = КодОбщегоНазначения.ПроверитьВключенаЛиДополнительнаяНастройкаПрограммы("Запись лога сообщений обмена");
			Если ВключенаЗапись Тогда
				Попытка
					МенеджерСообщения.Записать();
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр(
						"ru='Не удалось переписать сообщение в логе по причине %1'"), ОписаниеОшибки()));
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если routingKey = "user.2.event.client.updated.verification.requested" Тогда
//		Возврат ВзаимодействиеССайтом.ОбработатьЗапрос_ПоступлениеФотографийНаВерификацию(
//			ПараметрыМетода, Ответ, МенеджерСообщения);
	Иначе
			Возврат СформироватьСервисОтвет(Ответ, 200);
	КонецЕсли;
	
КонецФункции

#КонецОбласти
